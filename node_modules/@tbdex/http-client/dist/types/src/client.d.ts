import type { PortableDid } from '@web5/dids';
import type { ResourceMetadata, MessageModel, OfferingData, MessageKind, MessageKindClass } from '@tbdex/protocol';
import { Offering, Message } from '@tbdex/protocol';
/**
 * Parameters for generating a request token
 * @beta
 */
export type GenerateRequestTokenParams = {
    requesterDid: PortableDid;
    pfiDid: string;
};
/**
 * Parameters for verifying a request token
 * @beta
 */
export type VerifyRequestTokenParams = {
    requestToken: string;
    pfiDid: string;
};
/**
 * Required jwt claims expected in a request token
 * @beta
 */
export declare const requestTokenRequiredClaims: string[];
/**
 * HTTP client for interacting with TBDex PFIs
 * @beta
 */
export declare class TbdexHttpClient {
    /**
     * sends the message provided to the intended recipient
     * @param opts - options
     * @throws if message verification fails
     * @throws if recipient DID resolution fails
     * @throws if recipient DID does not have a PFI service entry
     */
    static sendMessage<T extends MessageKind>(opts: SendMessageOptions<T>): Promise<void>;
    /**
     * Discover PFIs that are anchored via did:ion. These have a type of "PFI" and an id of PFI.
     * You can then query the endpoints for offerings.
     */
    static discoverPFIs(): Promise<any>;
    /**
     * gets offerings from the pfi provided
     * @param opts - options
     * @beta
     */
    static getOfferings(opts: GetOfferingsOptions): Promise<Offering[]>;
    /**
     * get a specific exchange from the pfi provided
     * @param _opts - options
     */
    static getExchange(opts: GetExchangeOptions): Promise<MessageKindClass[]>;
    /**
     * returns all exchanges created by requester
     * @param _opts - options
     */
    static getExchanges(opts: GetExchangesOptions): Promise<MessageKindClass[][]>;
    /**
     * returns the PFI service entry from the DID Doc of the DID provided
     * @param did - the pfi's DID
     */
    static getPfiServiceEndpoint(did: string): Promise<string | import("@web5/dids").DidServiceEndpoint | import("@web5/dids").DidServiceEndpoint[]>;
    /**
    * Creates and signs a request token ([JWT](https://datatracker.ietf.org/doc/html/rfc7519))
    * that's included as the value of Authorization header for requests sent to a PFI API's
    * endpoints that require authentication
    *
    * JWT payload with the following claims:
    *  * `aud`
    *  * `iss`
    *  * `exp`
    *  * `iat`
    *  * `jti`The JWT is then signed and returned.
    *
    * @returns the request token (JWT)
    * @throws {RequestTokenError} If an error occurs during the token generation.
    */
    static generateRequestToken(params: GenerateRequestTokenParams): Promise<string>;
    /**
     * Validates and verifies the integrity of a request token ([JWT](https://datatracker.ietf.org/doc/html/rfc7519))
     * generated by {@link generateRequestToken}. Specifically:
     *   * verifies integrity of the JWT
     *   * ensures all required claims are present and valid.
     *   * ensures the token has not expired
     *   * ensures token audience matches the expected PFI DID.
     *
     * @returns the requester's DID as a string if the token is valid.
     * @throws {RequestTokenError} If the token is invalid, expired, or has been tampered with
    */
    static verifyRequestToken(params: VerifyRequestTokenParams): Promise<string>;
}
/**
 * options passed to {@link TbdexHttpClient.sendMessage} method
 * @beta
 */
export type SendMessageOptions<T extends MessageKind> = {
    /** the message you want to send */
    message: Message<T> | MessageModel<T>;
};
/**
 * options passed to {@link TbdexHttpClient.getOfferings} method
 * @beta
 */
export type GetOfferingsOptions = {
    /** the DID of the PFI from whom you want to get offerings */
    pfiDid: string;
    filter?: {
        /** ISO 3166 currency code string */
        payinCurrency?: OfferingData['payinCurrency']['currencyCode'];
        /** ISO 3166 currency code string */
        payoutCurrency?: OfferingData['payoutCurrency']['currencyCode'];
        id?: ResourceMetadata<any>['id'];
    };
};
/**
 * options passed to {@link TbdexHttpClient.getExchange} method
 * @beta
 */
export type GetExchangeOptions = {
    /** the DID of the PFI from whom you want to get offerings */
    pfiDid: string;
    /** the exchange you want to fetch */
    exchangeId: string;
    /** the message author's DID */
    did: PortableDid;
};
/**
 * options passed to {@link TbdexHttpClient.getExchanges} method
 * @beta
 */
export type GetExchangesOptions = {
    /** the DID of the PFI from whom you want to get offerings */
    pfiDid: string;
    did: PortableDid;
    filter?: {
        id: string | string[];
    };
};
//# sourceMappingURL=client.d.ts.map