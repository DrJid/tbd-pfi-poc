import type { OfferingData, QuoteData, RfqData } from './types.js';
import type { PortableDid } from '@web5/dids';
import { Offering } from './resource-kinds/index.js';
import { Rfq } from './message-kinds/index.js';
/**
 * Supported DID Methods
 * @beta
 */
export type DidMethodOptions = 'key' | 'ion';
/**
 * Options passed to {@link DevTools.createRfq}
 * @beta
 */
export type RfqOptions = {
    /**
     * {@link @web5/dids#PortableDid} of the rfq sender. used to generate a random credential that fulfills the vcRequirements
     * of the offering returned by {@link DevTools.createOffering}
     */
    sender: PortableDid;
    /**
     * {@link @web5/dids#PortableDid} of the rfq receiver.
     */
    receiver?: PortableDid;
};
/**
 * Utility functions for testing purposes
 * @beta
 */
export declare class DevTools {
    /**
     * creates and returns a DID
     * @param didMethod - the type of DID to create. defaults to did:key
     */
    static createDid(didMethod?: DidMethodOptions): Promise<PortableDid>;
    /**
     * creates and returns an example offering. Useful for testing purposes
     */
    static createOffering(opts?: {
        from?: string;
        offeringData?: OfferingData;
    }): Offering;
    /**
     * creates an example OfferingData. Useful for testing purposes
     */
    static createOfferingData(): OfferingData;
    /**
     * creates an example QuoteData. Useful for testing purposes
     */
    static createQuoteData(): QuoteData;
    /**
     *
     * creates and returns an example rfq for the offering returned by {@link DevTools.createOffering}.
     * Useful for testing purposes.
     *
     * **NOTE**: generates a random credential that fulfills the offering's required claims
     */
    static createRfq(opts: RfqOptions): Promise<Rfq>;
    /**
     * creates an example RfqData. Useful for testing purposes
     */
    static createRfqData(opts?: RfqOptions): Promise<RfqData>;
}
//# sourceMappingURL=dev-tools.d.ts.map