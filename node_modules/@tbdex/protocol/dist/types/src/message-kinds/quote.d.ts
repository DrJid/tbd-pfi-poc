import type { MessageKind, MessageKindModel, MessageMetadata } from '../types.js';
import { Message } from '../message.js';
/**
 * Options passed to {@link Quote.create}
 * @beta
 */
export type CreateQuoteOptions = {
    data: MessageKindModel<'quote'>;
    metadata: Omit<MessageMetadata<'quote'>, 'id' | 'kind' | 'createdAt'>;
};
/**
 * Sent by the PFI in response to an RFQ. Includes a locked-in price that the PFI is willing to honor until
 * the quote expires
 * @beta
 */
export declare class Quote extends Message<'quote'> {
    /** a set of valid Message kinds that can come after a quote */
    readonly validNext: Set<MessageKind>;
    /**
     * Creates a quote message with the given options
     * @param opts - options to create a quote
     */
    static create(opts: CreateQuoteOptions): Quote;
    /** When this quote expires. Expressed as ISO8601 */
    get expiresAt(): string;
    /** the amount of payin currency that the PFI will receive */
    get payin(): import("../types.js").QuoteDetails;
    /** the amount of payout currency that Alice will receive */
    get payout(): import("../types.js").QuoteDetails;
}
//# sourceMappingURL=quote.d.ts.map