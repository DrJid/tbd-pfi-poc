import type { ResourceModel, ResourceMetadata, ResourceKind, ResourceKindModel, NewResource } from './types.js';
import type { ResourceKindClass } from './resource-kinds/index.js';
import { PortableDid } from '@web5/dids';
/**
 * tbDEX Resources are published by PFIs for anyone to consume and generally used as a part of the discovery process.
 * They are not part of the message exchange, i.e Alice cannot reply to a Resource.
 * @beta
 */
export declare abstract class Resource<T extends ResourceKind> {
    private _metadata;
    private _data;
    private _signature;
    /**
     * used by {@link Resource.parse} to return an instance of resource kind's class. This abstraction is needed
     * because importing the Resource Kind classes (e.g. Offering) creates a circular dependency
     * due to each concrete Resource Kind class extending Resource. Library consumers dont have to worry about setting this
    */
    static factory: <T extends ResourceKind>(jsonResource: ResourceModel<T>) => ResourceKindClass;
    /**
     * Constructor is primarily for intended for internal use. For a better developer experience,
     * consumers should use concrete classes to programmatically create resources (e.g. Offering class) and
     * {@link Resource.parse} to parse stringified resources.
     * @param jsonResource - the resource as a json object
     * @param data - `resource.data` as a ResourceKind class instance. can be passed in as an optimization if class instance
     * is present in calling scope
     */
    constructor(jsonResource: NewResource<T>);
    /**
     * parses the json resource into a Resource instance. performs format validation and an integrity check on the signature
     * @param payload - the resource to parse. can either be an object or a string
     */
    static parse<T extends ResourceKind>(resource: ResourceModel<T> | string): Promise<ResourceKindClass>;
    /**
     * validates the resource and verifies the cryptographic signature
     * @throws if the message is invalid
     * @throws see {@link Crypto.verify}
     * @returns Resource signer's DID
     */
    static verify<T extends ResourceKind>(resource: ResourceModel<T> | Resource<T>): Promise<string>;
    /**
     * validates the resource provided against the appropriate json schemas.
     * 2-phased validation: First validates the resource structure and then
     * validates `data` based on the value of `metadata.kind`
     * @param jsonResource - the resource to validate
     *
     * @throws `Error` if validation fails
     */
    static validate(jsonResource: any): void;
    /**
     * Validates `data` section of resource only. This is useful for partially validating
     * unsigned Resources.
     */
    static validateData(kind: string, resourceData: any): void;
    /** Generates a unique id with the resource kind's prefix */
    static generateId(resourceKind: ResourceKind): string;
    /**
     * signs the message as a jws with detached content and sets the signature property
     * @param did - the signer's DID
     */
    sign(did: PortableDid): Promise<void>;
    /**
     * validates the resource and verifies the cryptographic signature
     * @throws if the resource is invalid
     * @throws see {@link Crypto.verify}
     * @returns Resource signer's DID
     */
    verify(): Promise<string>;
    /**
     * returns the message as a json object. Automatically used by `JSON.stringify` method.
     */
    toJSON(): ResourceModel<T>;
    /** The metadata object contains fields about the resource and is present in every tbdex resource. */
    get metadata(): ResourceMetadata<T>;
    /** the actual resource kind's content data */
    get data(): ResourceKindModel<T>;
    /** the resource's cryptographic signature */
    get signature(): string | undefined;
    /** the resource's id */
    get id(): string;
    /** the resource kind (e.g. offering) */
    get kind(): T;
    /** The sender's DID */
    get from(): string;
    /** Resource creation time. Expressed as ISO8601 */
    get createdAt(): string;
    /** Resource last updated time. Expressed as ISO8601 */
    get updatedAt(): string | undefined;
    /** offering type guard */
    isOffering(): this is Resource<'offering'>;
}
//# sourceMappingURL=resource.d.ts.map