import type { ResourceKindModel, ResourceMetadata } from '../types.js';
import { Resource } from '../resource.js';
/**
 * Options passed to {@link Offering.create}
 * @beta
 */
export type CreateOfferingOptions = {
    data: ResourceKindModel<'offering'>;
    metadata: Omit<ResourceMetadata<'offering'>, 'id' | 'kind' | 'createdAt' | 'updatedAt'>;
};
/**
 * An Offering is used by the PFI to describe a currency pair they have to offer
 * including the requirements, conditions, and constraints in
 * order to fulfill that offer.
 * @beta
 */
export declare class Offering extends Resource<'offering'> {
    /**
     * Creates an Offering with the given options
     * @param opts - options to create an offering
     */
    static create(opts: CreateOfferingOptions): Offering;
    /** Brief description of what is being offered. */
    get description(): string;
    /** Number of payout currency units for one payin currency unit (i.e 290000 USD for 1 BTC) */
    get payoutUnitsPerPayinUnit(): string;
    /** Details about the currency that the PFI is buying in exchange for payoutCurrency. */
    get payinCurrency(): import("../types.js").CurrencyDetails;
    /** Details about the currency that the PFI is buying in exchange for payinCurrency. */
    get payoutCurrency(): import("../types.js").CurrencyDetails;
    /** A list of accepted payment methods that Alice can use to send payinCurrency to a PFI */
    get payinMethods(): import("../types.js").PaymentMethod[];
    /** A list of accepted payment methods that Alice can use to receive payoutCurrency from a PFI */
    get payoutMethods(): import("../types.js").PaymentMethod[];
    /** Articulates the claim(s) required when submitting an RFQ for this offering. */
    get requiredClaims(): import("@web5/credentials").PresentationDefinitionV2 | undefined;
}
//# sourceMappingURL=offering.d.ts.map