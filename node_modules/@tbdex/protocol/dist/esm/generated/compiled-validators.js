"use strict";
export const close = validate10;
const schema11 = { "$schema": "http://json-schema.org/draft-07/schema#", "$id": "https://tbdex.dev/close.schema.json", "type": "object", "additionalProperties": false, "properties": { "reason": { "type": "string" } } };
function validate10(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { /*# sourceURL="https://tbdex.dev/close.schema.json" */ ; let vErrors = null; let errors = 0; if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        const _errs1 = errors;
        for (const key0 in data) {
            if (!(key0 === "reason")) {
                validate10.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                return false;
                break;
            }
        }
        if (_errs1 === errors) {
            if (data.reason !== undefined) {
                if (typeof data.reason !== "string") {
                    validate10.errors = [{ instancePath: instancePath + "/reason", schemaPath: "#/properties/reason/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                    return false;
                }
            }
        }
    }
    else {
        validate10.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate10.errors = vErrors; return errors === 0; }
export const definitions = validate11;
const schema12 = { "$schema": "http://json-schema.org/draft-07/schema#", "$id": "https://tbdex.dev/definitions.json", "type": "object", "definitions": { "did": { "type": "string", "pattern": "^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$" }, "decimalString": { "type": "string", "pattern": "^([0-9]+[.][0-9]+)$" } } };
function validate11(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { /*# sourceURL="https://tbdex.dev/definitions.json" */ ; let vErrors = null; let errors = 0; if (!(data && typeof data == "object" && !Array.isArray(data))) {
    validate11.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
    return false;
} validate11.errors = vErrors; return errors === 0; }
export const offering = validate12;
const schema13 = { "$schema": "http://json-schema.org/draft-07/schema#", "$id": "https://tbdex.dev/offering.schema.json", "definitions": { "CurrencyDetails": { "type": "object", "additionalProperties": false, "properties": { "currencyCode": { "type": "string", "description": "ISO 3166 currency code string" }, "minAmount": { "$ref": "definitions.json#/definitions/decimalString", "description": "Minimum amount of currency that can be requested" }, "maxAmount": { "$ref": "definitions.json#/definitions/decimalString", "description": "Maximum amount of currency that can be requested" } }, "required": ["currencyCode"] }, "PaymentMethod": { "type": "object", "additionalProperties": false, "properties": { "kind": { "type": "string", "description": "The type of payment method. e.g. BITCOIN_ADDRESS, DEBIT_CARD, etc." }, "requiredPaymentDetails": { "type": "object", "description": "A JSON Schema containing the fields that need to be collected in order to use this payment method" } }, "required": ["kind"] } }, "type": "object", "properties": { "additionalProperties": false, "description": { "type": "string", "description": "Brief description of what is being offered." }, "payoutUnitsPerPayinUnit": { "type": "string", "description": "Number of payout currency units for one payin currency unit (i.e 290000 USD for 1 BTC)" }, "payinCurrency": { "$ref": "#/definitions/CurrencyDetails" }, "payoutCurrency": { "$ref": "#/definitions/CurrencyDetails" }, "payinMethods": { "type": "array", "items": { "$ref": "#/definitions/PaymentMethod" } }, "payoutMethods": { "type": "array", "items": { "$ref": "#/definitions/PaymentMethod" } }, "requiredClaims": { "type": "object", "description": "PresentationDefinition that describes the credential(s) the PFI requires in order to provide a quote." } }, "required": ["description", "payoutUnitsPerPayinUnit", "payinCurrency", "payoutCurrency", "payinMethods", "payoutMethods", "requiredClaims"] };
const schema17 = { "type": "object", "additionalProperties": false, "properties": { "kind": { "type": "string", "description": "The type of payment method. e.g. BITCOIN_ADDRESS, DEBIT_CARD, etc." }, "requiredPaymentDetails": { "type": "object", "description": "A JSON Schema containing the fields that need to be collected in order to use this payment method" } }, "required": ["kind"] };
const schema14 = { "type": "object", "additionalProperties": false, "properties": { "currencyCode": { "type": "string", "description": "ISO 3166 currency code string" }, "minAmount": { "$ref": "definitions.json#/definitions/decimalString", "description": "Minimum amount of currency that can be requested" }, "maxAmount": { "$ref": "definitions.json#/definitions/decimalString", "description": "Maximum amount of currency that can be requested" } }, "required": ["currencyCode"] };
const schema15 = { "type": "string", "pattern": "^([0-9]+[.][0-9]+)$" };
const pattern0 = new RegExp("^([0-9]+[.][0-9]+)$", "u");
function validate13(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { let vErrors = null; let errors = 0; if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if ((data.currencyCode === undefined) && (missing0 = "currencyCode")) {
            validate13.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }];
            return false;
        }
        else {
            const _errs1 = errors;
            for (const key0 in data) {
                if (!(((key0 === "currencyCode") || (key0 === "minAmount")) || (key0 === "maxAmount"))) {
                    validate13.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                    return false;
                    break;
                }
            }
            if (_errs1 === errors) {
                if (data.currencyCode !== undefined) {
                    const _errs2 = errors;
                    if (typeof data.currencyCode !== "string") {
                        validate13.errors = [{ instancePath: instancePath + "/currencyCode", schemaPath: "#/properties/currencyCode/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                        return false;
                    }
                    var valid0 = _errs2 === errors;
                }
                else {
                    var valid0 = true;
                }
                if (valid0) {
                    if (data.minAmount !== undefined) {
                        let data1 = data.minAmount;
                        const _errs4 = errors;
                        const _errs5 = errors;
                        if (errors === _errs5) {
                            if (typeof data1 === "string") {
                                if (!pattern0.test(data1)) {
                                    validate13.errors = [{ instancePath: instancePath + "/minAmount", schemaPath: "definitions.json#/definitions/decimalString/pattern", keyword: "pattern", params: { pattern: "^([0-9]+[.][0-9]+)$" }, message: "must match pattern \"" + "^([0-9]+[.][0-9]+)$" + "\"" }];
                                    return false;
                                }
                            }
                            else {
                                validate13.errors = [{ instancePath: instancePath + "/minAmount", schemaPath: "definitions.json#/definitions/decimalString/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                return false;
                            }
                        }
                        var valid0 = _errs4 === errors;
                    }
                    else {
                        var valid0 = true;
                    }
                    if (valid0) {
                        if (data.maxAmount !== undefined) {
                            let data2 = data.maxAmount;
                            const _errs7 = errors;
                            const _errs8 = errors;
                            if (errors === _errs8) {
                                if (typeof data2 === "string") {
                                    if (!pattern0.test(data2)) {
                                        validate13.errors = [{ instancePath: instancePath + "/maxAmount", schemaPath: "definitions.json#/definitions/decimalString/pattern", keyword: "pattern", params: { pattern: "^([0-9]+[.][0-9]+)$" }, message: "must match pattern \"" + "^([0-9]+[.][0-9]+)$" + "\"" }];
                                        return false;
                                    }
                                }
                                else {
                                    validate13.errors = [{ instancePath: instancePath + "/maxAmount", schemaPath: "definitions.json#/definitions/decimalString/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                    return false;
                                }
                            }
                            var valid0 = _errs7 === errors;
                        }
                        else {
                            var valid0 = true;
                        }
                    }
                }
            }
        }
    }
    else {
        validate13.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate13.errors = vErrors; return errors === 0; }
function validate12(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { /*# sourceURL="https://tbdex.dev/offering.schema.json" */ ; let vErrors = null; let errors = 0; if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if ((((((((data.description === undefined) && (missing0 = "description")) || ((data.payoutUnitsPerPayinUnit === undefined) && (missing0 = "payoutUnitsPerPayinUnit"))) || ((data.payinCurrency === undefined) && (missing0 = "payinCurrency"))) || ((data.payoutCurrency === undefined) && (missing0 = "payoutCurrency"))) || ((data.payinMethods === undefined) && (missing0 = "payinMethods"))) || ((data.payoutMethods === undefined) && (missing0 = "payoutMethods"))) || ((data.requiredClaims === undefined) && (missing0 = "requiredClaims"))) {
            validate12.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }];
            return false;
        }
        else {
            if (data.additionalProperties !== undefined) {
                var valid0 = false;
                validate12.errors = [{ instancePath: instancePath + "/additionalProperties", schemaPath: "#/properties/additionalProperties/false schema", keyword: "false schema", params: {}, message: "boolean schema is false" }];
                return false;
            }
            else {
                var valid0 = true;
            }
            if (valid0) {
                if (data.description !== undefined) {
                    const _errs1 = errors;
                    if (typeof data.description !== "string") {
                        validate12.errors = [{ instancePath: instancePath + "/description", schemaPath: "#/properties/description/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                        return false;
                    }
                    var valid0 = _errs1 === errors;
                }
                else {
                    var valid0 = true;
                }
                if (valid0) {
                    if (data.payoutUnitsPerPayinUnit !== undefined) {
                        const _errs3 = errors;
                        if (typeof data.payoutUnitsPerPayinUnit !== "string") {
                            validate12.errors = [{ instancePath: instancePath + "/payoutUnitsPerPayinUnit", schemaPath: "#/properties/payoutUnitsPerPayinUnit/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                            return false;
                        }
                        var valid0 = _errs3 === errors;
                    }
                    else {
                        var valid0 = true;
                    }
                    if (valid0) {
                        if (data.payinCurrency !== undefined) {
                            const _errs5 = errors;
                            if (!(validate13(data.payinCurrency, { instancePath: instancePath + "/payinCurrency", parentData: data, parentDataProperty: "payinCurrency", rootData }))) {
                                vErrors = vErrors === null ? validate13.errors : vErrors.concat(validate13.errors);
                                errors = vErrors.length;
                            }
                            var valid0 = _errs5 === errors;
                        }
                        else {
                            var valid0 = true;
                        }
                        if (valid0) {
                            if (data.payoutCurrency !== undefined) {
                                const _errs6 = errors;
                                if (!(validate13(data.payoutCurrency, { instancePath: instancePath + "/payoutCurrency", parentData: data, parentDataProperty: "payoutCurrency", rootData }))) {
                                    vErrors = vErrors === null ? validate13.errors : vErrors.concat(validate13.errors);
                                    errors = vErrors.length;
                                }
                                var valid0 = _errs6 === errors;
                            }
                            else {
                                var valid0 = true;
                            }
                            if (valid0) {
                                if (data.payinMethods !== undefined) {
                                    let data5 = data.payinMethods;
                                    const _errs7 = errors;
                                    if (errors === _errs7) {
                                        if (Array.isArray(data5)) {
                                            var valid1 = true;
                                            const len0 = data5.length;
                                            for (let i0 = 0; i0 < len0; i0++) {
                                                let data6 = data5[i0];
                                                const _errs9 = errors;
                                                const _errs10 = errors;
                                                if (errors === _errs10) {
                                                    if (data6 && typeof data6 == "object" && !Array.isArray(data6)) {
                                                        let missing1;
                                                        if ((data6.kind === undefined) && (missing1 = "kind")) {
                                                            validate12.errors = [{ instancePath: instancePath + "/payinMethods/" + i0, schemaPath: "#/definitions/PaymentMethod/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }];
                                                            return false;
                                                        }
                                                        else {
                                                            const _errs12 = errors;
                                                            for (const key0 in data6) {
                                                                if (!((key0 === "kind") || (key0 === "requiredPaymentDetails"))) {
                                                                    validate12.errors = [{ instancePath: instancePath + "/payinMethods/" + i0, schemaPath: "#/definitions/PaymentMethod/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                                                                    return false;
                                                                    break;
                                                                }
                                                            }
                                                            if (_errs12 === errors) {
                                                                if (data6.kind !== undefined) {
                                                                    const _errs13 = errors;
                                                                    if (typeof data6.kind !== "string") {
                                                                        validate12.errors = [{ instancePath: instancePath + "/payinMethods/" + i0 + "/kind", schemaPath: "#/definitions/PaymentMethod/properties/kind/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                        return false;
                                                                    }
                                                                    var valid3 = _errs13 === errors;
                                                                }
                                                                else {
                                                                    var valid3 = true;
                                                                }
                                                                if (valid3) {
                                                                    if (data6.requiredPaymentDetails !== undefined) {
                                                                        let data8 = data6.requiredPaymentDetails;
                                                                        const _errs15 = errors;
                                                                        if (!(data8 && typeof data8 == "object" && !Array.isArray(data8))) {
                                                                            validate12.errors = [{ instancePath: instancePath + "/payinMethods/" + i0 + "/requiredPaymentDetails", schemaPath: "#/definitions/PaymentMethod/properties/requiredPaymentDetails/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                                                            return false;
                                                                        }
                                                                        var valid3 = _errs15 === errors;
                                                                    }
                                                                    else {
                                                                        var valid3 = true;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    else {
                                                        validate12.errors = [{ instancePath: instancePath + "/payinMethods/" + i0, schemaPath: "#/definitions/PaymentMethod/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                                        return false;
                                                    }
                                                }
                                                var valid1 = _errs9 === errors;
                                                if (!valid1) {
                                                    break;
                                                }
                                            }
                                        }
                                        else {
                                            validate12.errors = [{ instancePath: instancePath + "/payinMethods", schemaPath: "#/properties/payinMethods/type", keyword: "type", params: { type: "array" }, message: "must be array" }];
                                            return false;
                                        }
                                    }
                                    var valid0 = _errs7 === errors;
                                }
                                else {
                                    var valid0 = true;
                                }
                                if (valid0) {
                                    if (data.payoutMethods !== undefined) {
                                        let data9 = data.payoutMethods;
                                        const _errs17 = errors;
                                        if (errors === _errs17) {
                                            if (Array.isArray(data9)) {
                                                var valid4 = true;
                                                const len1 = data9.length;
                                                for (let i1 = 0; i1 < len1; i1++) {
                                                    let data10 = data9[i1];
                                                    const _errs19 = errors;
                                                    const _errs20 = errors;
                                                    if (errors === _errs20) {
                                                        if (data10 && typeof data10 == "object" && !Array.isArray(data10)) {
                                                            let missing2;
                                                            if ((data10.kind === undefined) && (missing2 = "kind")) {
                                                                validate12.errors = [{ instancePath: instancePath + "/payoutMethods/" + i1, schemaPath: "#/definitions/PaymentMethod/required", keyword: "required", params: { missingProperty: missing2 }, message: "must have required property '" + missing2 + "'" }];
                                                                return false;
                                                            }
                                                            else {
                                                                const _errs22 = errors;
                                                                for (const key1 in data10) {
                                                                    if (!((key1 === "kind") || (key1 === "requiredPaymentDetails"))) {
                                                                        validate12.errors = [{ instancePath: instancePath + "/payoutMethods/" + i1, schemaPath: "#/definitions/PaymentMethod/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }];
                                                                        return false;
                                                                        break;
                                                                    }
                                                                }
                                                                if (_errs22 === errors) {
                                                                    if (data10.kind !== undefined) {
                                                                        const _errs23 = errors;
                                                                        if (typeof data10.kind !== "string") {
                                                                            validate12.errors = [{ instancePath: instancePath + "/payoutMethods/" + i1 + "/kind", schemaPath: "#/definitions/PaymentMethod/properties/kind/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                            return false;
                                                                        }
                                                                        var valid6 = _errs23 === errors;
                                                                    }
                                                                    else {
                                                                        var valid6 = true;
                                                                    }
                                                                    if (valid6) {
                                                                        if (data10.requiredPaymentDetails !== undefined) {
                                                                            let data12 = data10.requiredPaymentDetails;
                                                                            const _errs25 = errors;
                                                                            if (!(data12 && typeof data12 == "object" && !Array.isArray(data12))) {
                                                                                validate12.errors = [{ instancePath: instancePath + "/payoutMethods/" + i1 + "/requiredPaymentDetails", schemaPath: "#/definitions/PaymentMethod/properties/requiredPaymentDetails/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                                                                return false;
                                                                            }
                                                                            var valid6 = _errs25 === errors;
                                                                        }
                                                                        else {
                                                                            var valid6 = true;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        else {
                                                            validate12.errors = [{ instancePath: instancePath + "/payoutMethods/" + i1, schemaPath: "#/definitions/PaymentMethod/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                                            return false;
                                                        }
                                                    }
                                                    var valid4 = _errs19 === errors;
                                                    if (!valid4) {
                                                        break;
                                                    }
                                                }
                                            }
                                            else {
                                                validate12.errors = [{ instancePath: instancePath + "/payoutMethods", schemaPath: "#/properties/payoutMethods/type", keyword: "type", params: { type: "array" }, message: "must be array" }];
                                                return false;
                                            }
                                        }
                                        var valid0 = _errs17 === errors;
                                    }
                                    else {
                                        var valid0 = true;
                                    }
                                    if (valid0) {
                                        if (data.requiredClaims !== undefined) {
                                            let data13 = data.requiredClaims;
                                            const _errs27 = errors;
                                            if (!(data13 && typeof data13 == "object" && !Array.isArray(data13))) {
                                                validate12.errors = [{ instancePath: instancePath + "/requiredClaims", schemaPath: "#/properties/requiredClaims/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                                return false;
                                            }
                                            var valid0 = _errs27 === errors;
                                        }
                                        else {
                                            var valid0 = true;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        validate12.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate12.errors = vErrors; return errors === 0; }
export const message = validate16;
const schema19 = { "$schema": "http://json-schema.org/draft-07/schema#", "$id": "https://tbdex.dev/message.schema.json", "definitions": { "MessageMetadata": { "type": "object", "additionalProperties": false, "properties": { "from": { "$ref": "definitions.json#/definitions/did", "description": "The sender's DID" }, "to": { "$ref": "https://tbdex.dev/definitions.json#/definitions/did", "description": "The recipient's DID" }, "kind": { "type": "string", "enum": ["rfq", "quote", "order", "orderstatus", "close"], "description": "The message kind (e.g. rfq, quote)" }, "id": { "type": "string", "description": "The message ID" }, "exchangeId": { "type": "string", "description": "ID for a 'thread' of messages between Alice <-> PFI. Set by the first message in a thread" }, "createdAt": { "type": "string", "description": "ISO8601 formatted string representing the timestamp" } }, "required": ["from", "to", "kind", "id", "exchangeId", "createdAt"] }, "Private": { "type": "object", "description": "An ephemeral JSON object used to transmit sensitive data (e.g. PII)" } }, "type": "object", "properties": { "metadata": { "$ref": "#/definitions/MessageMetadata" }, "data": { "type": "object", "description": "The actual message content" }, "signature": { "type": "string", "description": "Signature that verifies the authenticity and integrity of a message" }, "private": { "$ref": "#/definitions/Private" } }, "additionalProperties": false, "required": ["metadata", "data", "signature"] };
const schema23 = { "type": "object", "description": "An ephemeral JSON object used to transmit sensitive data (e.g. PII)" };
const schema20 = { "type": "object", "additionalProperties": false, "properties": { "from": { "$ref": "definitions.json#/definitions/did", "description": "The sender's DID" }, "to": { "$ref": "https://tbdex.dev/definitions.json#/definitions/did", "description": "The recipient's DID" }, "kind": { "type": "string", "enum": ["rfq", "quote", "order", "orderstatus", "close"], "description": "The message kind (e.g. rfq, quote)" }, "id": { "type": "string", "description": "The message ID" }, "exchangeId": { "type": "string", "description": "ID for a 'thread' of messages between Alice <-> PFI. Set by the first message in a thread" }, "createdAt": { "type": "string", "description": "ISO8601 formatted string representing the timestamp" } }, "required": ["from", "to", "kind", "id", "exchangeId", "createdAt"] };
const schema21 = { "type": "string", "pattern": "^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$" };
const pattern2 = new RegExp("^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$", "u");
function validate17(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { let vErrors = null; let errors = 0; if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if (((((((data.from === undefined) && (missing0 = "from")) || ((data.to === undefined) && (missing0 = "to"))) || ((data.kind === undefined) && (missing0 = "kind"))) || ((data.id === undefined) && (missing0 = "id"))) || ((data.exchangeId === undefined) && (missing0 = "exchangeId"))) || ((data.createdAt === undefined) && (missing0 = "createdAt"))) {
            validate17.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }];
            return false;
        }
        else {
            const _errs1 = errors;
            for (const key0 in data) {
                if (!((((((key0 === "from") || (key0 === "to")) || (key0 === "kind")) || (key0 === "id")) || (key0 === "exchangeId")) || (key0 === "createdAt"))) {
                    validate17.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                    return false;
                    break;
                }
            }
            if (_errs1 === errors) {
                if (data.from !== undefined) {
                    let data0 = data.from;
                    const _errs2 = errors;
                    const _errs3 = errors;
                    if (errors === _errs3) {
                        if (typeof data0 === "string") {
                            if (!pattern2.test(data0)) {
                                validate17.errors = [{ instancePath: instancePath + "/from", schemaPath: "definitions.json#/definitions/did/pattern", keyword: "pattern", params: { pattern: "^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$" }, message: "must match pattern \"" + "^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$" + "\"" }];
                                return false;
                            }
                        }
                        else {
                            validate17.errors = [{ instancePath: instancePath + "/from", schemaPath: "definitions.json#/definitions/did/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                            return false;
                        }
                    }
                    var valid0 = _errs2 === errors;
                }
                else {
                    var valid0 = true;
                }
                if (valid0) {
                    if (data.to !== undefined) {
                        let data1 = data.to;
                        const _errs5 = errors;
                        const _errs6 = errors;
                        if (errors === _errs6) {
                            if (typeof data1 === "string") {
                                if (!pattern2.test(data1)) {
                                    validate17.errors = [{ instancePath: instancePath + "/to", schemaPath: "https://tbdex.dev/definitions.json#/definitions/did/pattern", keyword: "pattern", params: { pattern: "^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$" }, message: "must match pattern \"" + "^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$" + "\"" }];
                                    return false;
                                }
                            }
                            else {
                                validate17.errors = [{ instancePath: instancePath + "/to", schemaPath: "https://tbdex.dev/definitions.json#/definitions/did/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                return false;
                            }
                        }
                        var valid0 = _errs5 === errors;
                    }
                    else {
                        var valid0 = true;
                    }
                    if (valid0) {
                        if (data.kind !== undefined) {
                            let data2 = data.kind;
                            const _errs8 = errors;
                            if (typeof data2 !== "string") {
                                validate17.errors = [{ instancePath: instancePath + "/kind", schemaPath: "#/properties/kind/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                return false;
                            }
                            if (!(((((data2 === "rfq") || (data2 === "quote")) || (data2 === "order")) || (data2 === "orderstatus")) || (data2 === "close"))) {
                                validate17.errors = [{ instancePath: instancePath + "/kind", schemaPath: "#/properties/kind/enum", keyword: "enum", params: { allowedValues: schema20.properties.kind.enum }, message: "must be equal to one of the allowed values" }];
                                return false;
                            }
                            var valid0 = _errs8 === errors;
                        }
                        else {
                            var valid0 = true;
                        }
                        if (valid0) {
                            if (data.id !== undefined) {
                                const _errs10 = errors;
                                if (typeof data.id !== "string") {
                                    validate17.errors = [{ instancePath: instancePath + "/id", schemaPath: "#/properties/id/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                    return false;
                                }
                                var valid0 = _errs10 === errors;
                            }
                            else {
                                var valid0 = true;
                            }
                            if (valid0) {
                                if (data.exchangeId !== undefined) {
                                    const _errs12 = errors;
                                    if (typeof data.exchangeId !== "string") {
                                        validate17.errors = [{ instancePath: instancePath + "/exchangeId", schemaPath: "#/properties/exchangeId/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                        return false;
                                    }
                                    var valid0 = _errs12 === errors;
                                }
                                else {
                                    var valid0 = true;
                                }
                                if (valid0) {
                                    if (data.createdAt !== undefined) {
                                        const _errs14 = errors;
                                        if (typeof data.createdAt !== "string") {
                                            validate17.errors = [{ instancePath: instancePath + "/createdAt", schemaPath: "#/properties/createdAt/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                            return false;
                                        }
                                        var valid0 = _errs14 === errors;
                                    }
                                    else {
                                        var valid0 = true;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        validate17.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate17.errors = vErrors; return errors === 0; }
function validate16(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { /*# sourceURL="https://tbdex.dev/message.schema.json" */ ; let vErrors = null; let errors = 0; if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if ((((data.metadata === undefined) && (missing0 = "metadata")) || ((data.data === undefined) && (missing0 = "data"))) || ((data.signature === undefined) && (missing0 = "signature"))) {
            validate16.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }];
            return false;
        }
        else {
            const _errs1 = errors;
            for (const key0 in data) {
                if (!((((key0 === "metadata") || (key0 === "data")) || (key0 === "signature")) || (key0 === "private"))) {
                    validate16.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                    return false;
                    break;
                }
            }
            if (_errs1 === errors) {
                if (data.metadata !== undefined) {
                    const _errs2 = errors;
                    if (!(validate17(data.metadata, { instancePath: instancePath + "/metadata", parentData: data, parentDataProperty: "metadata", rootData }))) {
                        vErrors = vErrors === null ? validate17.errors : vErrors.concat(validate17.errors);
                        errors = vErrors.length;
                    }
                    var valid0 = _errs2 === errors;
                }
                else {
                    var valid0 = true;
                }
                if (valid0) {
                    if (data.data !== undefined) {
                        let data1 = data.data;
                        const _errs3 = errors;
                        if (!(data1 && typeof data1 == "object" && !Array.isArray(data1))) {
                            validate16.errors = [{ instancePath: instancePath + "/data", schemaPath: "#/properties/data/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                            return false;
                        }
                        var valid0 = _errs3 === errors;
                    }
                    else {
                        var valid0 = true;
                    }
                    if (valid0) {
                        if (data.signature !== undefined) {
                            const _errs5 = errors;
                            if (typeof data.signature !== "string") {
                                validate16.errors = [{ instancePath: instancePath + "/signature", schemaPath: "#/properties/signature/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                return false;
                            }
                            var valid0 = _errs5 === errors;
                        }
                        else {
                            var valid0 = true;
                        }
                        if (valid0) {
                            if (data.private !== undefined) {
                                let data3 = data.private;
                                const _errs7 = errors;
                                if (!(data3 && typeof data3 == "object" && !Array.isArray(data3))) {
                                    validate16.errors = [{ instancePath: instancePath + "/private", schemaPath: "#/definitions/Private/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                    return false;
                                }
                                var valid0 = _errs7 === errors;
                            }
                            else {
                                var valid0 = true;
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        validate16.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate16.errors = vErrors; return errors === 0; }
export const order = validate19;
const schema24 = { "$schema": "http://json-schema.org/draft-07/schema#", "$id": "https://tbdex.dev/order.schema.json", "type": "object", "additionalProperties": false, "properties": {} };
function validate19(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { /*# sourceURL="https://tbdex.dev/order.schema.json" */ ; let vErrors = null; let errors = 0; if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        for (const key0 in data) {
            validate19.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
            return false;
            break;
        }
    }
    else {
        validate19.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate19.errors = vErrors; return errors === 0; }
export const orderstatus = validate20;
const schema25 = { "$schema": "http://json-schema.org/draft-07/schema#", "$id": "https://tbdex.dev/orderstatus.schema.json", "type": "object", "required": ["orderStatus"], "additionalProperties": false, "properties": { "orderStatus": { "type": "string" } } };
function validate20(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { /*# sourceURL="https://tbdex.dev/orderstatus.schema.json" */ ; let vErrors = null; let errors = 0; if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if ((data.orderStatus === undefined) && (missing0 = "orderStatus")) {
            validate20.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }];
            return false;
        }
        else {
            const _errs1 = errors;
            for (const key0 in data) {
                if (!(key0 === "orderStatus")) {
                    validate20.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                    return false;
                    break;
                }
            }
            if (_errs1 === errors) {
                if (data.orderStatus !== undefined) {
                    if (typeof data.orderStatus !== "string") {
                        validate20.errors = [{ instancePath: instancePath + "/orderStatus", schemaPath: "#/properties/orderStatus/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                        return false;
                    }
                }
            }
        }
    }
    else {
        validate20.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate20.errors = vErrors; return errors === 0; }
export const quote = validate21;
const schema26 = { "$schema": "http://json-schema.org/draft-07/schema#", "$id": "https://tbdex.dev/quote.schema.json", "definitions": { "QuoteDetails": { "type": "object", "additionalProperties": false, "properties": { "currencyCode": { "type": "string", "description": "ISO 3166 currency code string" }, "amount": { "$ref": "definitions.json#/definitions/decimalString", "description": "The amount of currency expressed in the smallest respective unit" }, "fee": { "$ref": "definitions.json#/definitions/decimalString", "description": "The amount paid in fees" }, "paymentInstruction": { "$ref": "#/definitions/PaymentInstruction" } }, "required": ["currencyCode", "amount"] }, "PaymentInstruction": { "type": "object", "additionalProperties": false, "properties": { "link": { "type": "string", "description": "Link to allow Alice to pay PFI, or be paid by the PFI" }, "instruction": { "type": "string", "description": "Instruction on how Alice can pay PFI, or how Alice can be paid by the PFI" } } } }, "type": "object", "additionalProperties": false, "properties": { "expiresAt": { "type": "string", "description": "When this quote expires. Expressed as ISO8601" }, "payin": { "$ref": "#/definitions/QuoteDetails" }, "payout": { "$ref": "#/definitions/QuoteDetails" } }, "required": ["expiresAt", "payin", "payout"] };
const schema27 = { "type": "object", "additionalProperties": false, "properties": { "currencyCode": { "type": "string", "description": "ISO 3166 currency code string" }, "amount": { "$ref": "definitions.json#/definitions/decimalString", "description": "The amount of currency expressed in the smallest respective unit" }, "fee": { "$ref": "definitions.json#/definitions/decimalString", "description": "The amount paid in fees" }, "paymentInstruction": { "$ref": "#/definitions/PaymentInstruction" } }, "required": ["currencyCode", "amount"] };
const schema30 = { "type": "object", "additionalProperties": false, "properties": { "link": { "type": "string", "description": "Link to allow Alice to pay PFI, or be paid by the PFI" }, "instruction": { "type": "string", "description": "Instruction on how Alice can pay PFI, or how Alice can be paid by the PFI" } } };
function validate22(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { let vErrors = null; let errors = 0; if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if (((data.currencyCode === undefined) && (missing0 = "currencyCode")) || ((data.amount === undefined) && (missing0 = "amount"))) {
            validate22.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }];
            return false;
        }
        else {
            const _errs1 = errors;
            for (const key0 in data) {
                if (!((((key0 === "currencyCode") || (key0 === "amount")) || (key0 === "fee")) || (key0 === "paymentInstruction"))) {
                    validate22.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                    return false;
                    break;
                }
            }
            if (_errs1 === errors) {
                if (data.currencyCode !== undefined) {
                    const _errs2 = errors;
                    if (typeof data.currencyCode !== "string") {
                        validate22.errors = [{ instancePath: instancePath + "/currencyCode", schemaPath: "#/properties/currencyCode/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                        return false;
                    }
                    var valid0 = _errs2 === errors;
                }
                else {
                    var valid0 = true;
                }
                if (valid0) {
                    if (data.amount !== undefined) {
                        let data1 = data.amount;
                        const _errs4 = errors;
                        const _errs5 = errors;
                        if (errors === _errs5) {
                            if (typeof data1 === "string") {
                                if (!pattern0.test(data1)) {
                                    validate22.errors = [{ instancePath: instancePath + "/amount", schemaPath: "definitions.json#/definitions/decimalString/pattern", keyword: "pattern", params: { pattern: "^([0-9]+[.][0-9]+)$" }, message: "must match pattern \"" + "^([0-9]+[.][0-9]+)$" + "\"" }];
                                    return false;
                                }
                            }
                            else {
                                validate22.errors = [{ instancePath: instancePath + "/amount", schemaPath: "definitions.json#/definitions/decimalString/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                return false;
                            }
                        }
                        var valid0 = _errs4 === errors;
                    }
                    else {
                        var valid0 = true;
                    }
                    if (valid0) {
                        if (data.fee !== undefined) {
                            let data2 = data.fee;
                            const _errs7 = errors;
                            const _errs8 = errors;
                            if (errors === _errs8) {
                                if (typeof data2 === "string") {
                                    if (!pattern0.test(data2)) {
                                        validate22.errors = [{ instancePath: instancePath + "/fee", schemaPath: "definitions.json#/definitions/decimalString/pattern", keyword: "pattern", params: { pattern: "^([0-9]+[.][0-9]+)$" }, message: "must match pattern \"" + "^([0-9]+[.][0-9]+)$" + "\"" }];
                                        return false;
                                    }
                                }
                                else {
                                    validate22.errors = [{ instancePath: instancePath + "/fee", schemaPath: "definitions.json#/definitions/decimalString/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                    return false;
                                }
                            }
                            var valid0 = _errs7 === errors;
                        }
                        else {
                            var valid0 = true;
                        }
                        if (valid0) {
                            if (data.paymentInstruction !== undefined) {
                                let data3 = data.paymentInstruction;
                                const _errs10 = errors;
                                const _errs11 = errors;
                                if (errors === _errs11) {
                                    if (data3 && typeof data3 == "object" && !Array.isArray(data3)) {
                                        const _errs13 = errors;
                                        for (const key1 in data3) {
                                            if (!((key1 === "link") || (key1 === "instruction"))) {
                                                validate22.errors = [{ instancePath: instancePath + "/paymentInstruction", schemaPath: "#/definitions/PaymentInstruction/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }];
                                                return false;
                                                break;
                                            }
                                        }
                                        if (_errs13 === errors) {
                                            if (data3.link !== undefined) {
                                                const _errs14 = errors;
                                                if (typeof data3.link !== "string") {
                                                    validate22.errors = [{ instancePath: instancePath + "/paymentInstruction/link", schemaPath: "#/definitions/PaymentInstruction/properties/link/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                    return false;
                                                }
                                                var valid4 = _errs14 === errors;
                                            }
                                            else {
                                                var valid4 = true;
                                            }
                                            if (valid4) {
                                                if (data3.instruction !== undefined) {
                                                    const _errs16 = errors;
                                                    if (typeof data3.instruction !== "string") {
                                                        validate22.errors = [{ instancePath: instancePath + "/paymentInstruction/instruction", schemaPath: "#/definitions/PaymentInstruction/properties/instruction/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                        return false;
                                                    }
                                                    var valid4 = _errs16 === errors;
                                                }
                                                else {
                                                    var valid4 = true;
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        validate22.errors = [{ instancePath: instancePath + "/paymentInstruction", schemaPath: "#/definitions/PaymentInstruction/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                        return false;
                                    }
                                }
                                var valid0 = _errs10 === errors;
                            }
                            else {
                                var valid0 = true;
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        validate22.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate22.errors = vErrors; return errors === 0; }
function validate21(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { /*# sourceURL="https://tbdex.dev/quote.schema.json" */ ; let vErrors = null; let errors = 0; if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if ((((data.expiresAt === undefined) && (missing0 = "expiresAt")) || ((data.payin === undefined) && (missing0 = "payin"))) || ((data.payout === undefined) && (missing0 = "payout"))) {
            validate21.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }];
            return false;
        }
        else {
            const _errs1 = errors;
            for (const key0 in data) {
                if (!(((key0 === "expiresAt") || (key0 === "payin")) || (key0 === "payout"))) {
                    validate21.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                    return false;
                    break;
                }
            }
            if (_errs1 === errors) {
                if (data.expiresAt !== undefined) {
                    const _errs2 = errors;
                    if (typeof data.expiresAt !== "string") {
                        validate21.errors = [{ instancePath: instancePath + "/expiresAt", schemaPath: "#/properties/expiresAt/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                        return false;
                    }
                    var valid0 = _errs2 === errors;
                }
                else {
                    var valid0 = true;
                }
                if (valid0) {
                    if (data.payin !== undefined) {
                        const _errs4 = errors;
                        if (!(validate22(data.payin, { instancePath: instancePath + "/payin", parentData: data, parentDataProperty: "payin", rootData }))) {
                            vErrors = vErrors === null ? validate22.errors : vErrors.concat(validate22.errors);
                            errors = vErrors.length;
                        }
                        var valid0 = _errs4 === errors;
                    }
                    else {
                        var valid0 = true;
                    }
                    if (valid0) {
                        if (data.payout !== undefined) {
                            const _errs5 = errors;
                            if (!(validate22(data.payout, { instancePath: instancePath + "/payout", parentData: data, parentDataProperty: "payout", rootData }))) {
                                vErrors = vErrors === null ? validate22.errors : vErrors.concat(validate22.errors);
                                errors = vErrors.length;
                            }
                            var valid0 = _errs5 === errors;
                        }
                        else {
                            var valid0 = true;
                        }
                    }
                }
            }
        }
    }
    else {
        validate21.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate21.errors = vErrors; return errors === 0; }
export const resource = validate25;
const schema31 = { "$schema": "http://json-schema.org/draft-07/schema#", "$id": "https://tbdex.dev/resource.schema.json", "type": "object", "additionalProperties": false, "properties": { "metadata": { "type": "object", "properties": { "from": { "$ref": "https://tbdex.dev/definitions.json#/definitions/did", "description": "The PFI's DID" }, "kind": { "type": "string", "enum": ["offering"], "description": "The resource kind (e.g. Offering)" }, "id": { "type": "string", "description": "The resource id" }, "createdAt": { "type": "string", "description": "When the resource was created at. Expressed as ISO8601" }, "updatedAt": { "type": "string", "description": "When the resource was last updated. Expressed as ISO8601" } }, "required": ["from", "kind", "id", "createdAt"], "description": "The metadata object contains fields about the resource and is present for every tbdex resources of all types." }, "data": { "description": "The actual resource content", "type": "object" }, "signature": { "type": "string", "description": "Signature that verifies that authenticity and integrity of a message" } }, "required": ["metadata", "data", "signature"], "description": "ResourceModel" };
function validate25(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { /*# sourceURL="https://tbdex.dev/resource.schema.json" */ ; let vErrors = null; let errors = 0; if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if ((((data.metadata === undefined) && (missing0 = "metadata")) || ((data.data === undefined) && (missing0 = "data"))) || ((data.signature === undefined) && (missing0 = "signature"))) {
            validate25.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }];
            return false;
        }
        else {
            const _errs1 = errors;
            for (const key0 in data) {
                if (!(((key0 === "metadata") || (key0 === "data")) || (key0 === "signature"))) {
                    validate25.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                    return false;
                    break;
                }
            }
            if (_errs1 === errors) {
                if (data.metadata !== undefined) {
                    let data0 = data.metadata;
                    const _errs2 = errors;
                    if (errors === _errs2) {
                        if (data0 && typeof data0 == "object" && !Array.isArray(data0)) {
                            let missing1;
                            if (((((data0.from === undefined) && (missing1 = "from")) || ((data0.kind === undefined) && (missing1 = "kind"))) || ((data0.id === undefined) && (missing1 = "id"))) || ((data0.createdAt === undefined) && (missing1 = "createdAt"))) {
                                validate25.errors = [{ instancePath: instancePath + "/metadata", schemaPath: "#/properties/metadata/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }];
                                return false;
                            }
                            else {
                                if (data0.from !== undefined) {
                                    let data1 = data0.from;
                                    const _errs4 = errors;
                                    const _errs5 = errors;
                                    if (errors === _errs5) {
                                        if (typeof data1 === "string") {
                                            if (!pattern2.test(data1)) {
                                                validate25.errors = [{ instancePath: instancePath + "/metadata/from", schemaPath: "https://tbdex.dev/definitions.json#/definitions/did/pattern", keyword: "pattern", params: { pattern: "^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$" }, message: "must match pattern \"" + "^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$" + "\"" }];
                                                return false;
                                            }
                                        }
                                        else {
                                            validate25.errors = [{ instancePath: instancePath + "/metadata/from", schemaPath: "https://tbdex.dev/definitions.json#/definitions/did/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                            return false;
                                        }
                                    }
                                    var valid1 = _errs4 === errors;
                                }
                                else {
                                    var valid1 = true;
                                }
                                if (valid1) {
                                    if (data0.kind !== undefined) {
                                        let data2 = data0.kind;
                                        const _errs7 = errors;
                                        if (typeof data2 !== "string") {
                                            validate25.errors = [{ instancePath: instancePath + "/metadata/kind", schemaPath: "#/properties/metadata/properties/kind/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                            return false;
                                        }
                                        if (!(data2 === "offering")) {
                                            validate25.errors = [{ instancePath: instancePath + "/metadata/kind", schemaPath: "#/properties/metadata/properties/kind/enum", keyword: "enum", params: { allowedValues: schema31.properties.metadata.properties.kind.enum }, message: "must be equal to one of the allowed values" }];
                                            return false;
                                        }
                                        var valid1 = _errs7 === errors;
                                    }
                                    else {
                                        var valid1 = true;
                                    }
                                    if (valid1) {
                                        if (data0.id !== undefined) {
                                            const _errs9 = errors;
                                            if (typeof data0.id !== "string") {
                                                validate25.errors = [{ instancePath: instancePath + "/metadata/id", schemaPath: "#/properties/metadata/properties/id/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                return false;
                                            }
                                            var valid1 = _errs9 === errors;
                                        }
                                        else {
                                            var valid1 = true;
                                        }
                                        if (valid1) {
                                            if (data0.createdAt !== undefined) {
                                                const _errs11 = errors;
                                                if (typeof data0.createdAt !== "string") {
                                                    validate25.errors = [{ instancePath: instancePath + "/metadata/createdAt", schemaPath: "#/properties/metadata/properties/createdAt/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                    return false;
                                                }
                                                var valid1 = _errs11 === errors;
                                            }
                                            else {
                                                var valid1 = true;
                                            }
                                            if (valid1) {
                                                if (data0.updatedAt !== undefined) {
                                                    const _errs13 = errors;
                                                    if (typeof data0.updatedAt !== "string") {
                                                        validate25.errors = [{ instancePath: instancePath + "/metadata/updatedAt", schemaPath: "#/properties/metadata/properties/updatedAt/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                        return false;
                                                    }
                                                    var valid1 = _errs13 === errors;
                                                }
                                                else {
                                                    var valid1 = true;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        else {
                            validate25.errors = [{ instancePath: instancePath + "/metadata", schemaPath: "#/properties/metadata/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                            return false;
                        }
                    }
                    var valid0 = _errs2 === errors;
                }
                else {
                    var valid0 = true;
                }
                if (valid0) {
                    if (data.data !== undefined) {
                        let data6 = data.data;
                        const _errs15 = errors;
                        if (!(data6 && typeof data6 == "object" && !Array.isArray(data6))) {
                            validate25.errors = [{ instancePath: instancePath + "/data", schemaPath: "#/properties/data/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                            return false;
                        }
                        var valid0 = _errs15 === errors;
                    }
                    else {
                        var valid0 = true;
                    }
                    if (valid0) {
                        if (data.signature !== undefined) {
                            const _errs17 = errors;
                            if (typeof data.signature !== "string") {
                                validate25.errors = [{ instancePath: instancePath + "/signature", schemaPath: "#/properties/signature/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                return false;
                            }
                            var valid0 = _errs17 === errors;
                        }
                        else {
                            var valid0 = true;
                        }
                    }
                }
            }
        }
    }
    else {
        validate25.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate25.errors = vErrors; return errors === 0; }
export const rfq = validate26;
const schema33 = { "$schema": "http://json-schema.org/draft-07/schema#", "$id": "https://tbdex.dev/rfq.schema.json", "definitions": { "SelectedPaymentMethod": { "type": "object", "additionalProperties": false, "properties": { "kind": { "type": "string", "description": "Type of payment method e.g. BTC_ADDRESS, DEBIT_CARD, MOMO_MPESA" }, "paymentDetails": { "type": "object", "description": "An object containing the properties defined in the respective Offering's requiredPaymentDetails json schema" } }, "required": ["kind", "paymentDetails"] } }, "type": "object", "properties": { "additionalProperties": false, "offeringId": { "type": "string", "description": "Offering which Alice would like to get a quote for" }, "payinAmount": { "$ref": "definitions.json#/definitions/decimalString", "description": "Amount of quote currency you want to spend in order to receive base currency" }, "claims": { "type": "array", "items": { "type": "string" }, "description": "Presentation Submission that fulfills the requirements included in the respective Offering" }, "payinMethod": { "$ref": "#/definitions/SelectedPaymentMethod" }, "payoutMethod": { "$ref": "#/definitions/SelectedPaymentMethod" } }, "required": ["offeringId", "payinAmount", "claims", "payinMethod", "payoutMethod"] };
const schema35 = { "type": "object", "additionalProperties": false, "properties": { "kind": { "type": "string", "description": "Type of payment method e.g. BTC_ADDRESS, DEBIT_CARD, MOMO_MPESA" }, "paymentDetails": { "type": "object", "description": "An object containing the properties defined in the respective Offering's requiredPaymentDetails json schema" } }, "required": ["kind", "paymentDetails"] };
function validate26(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { /*# sourceURL="https://tbdex.dev/rfq.schema.json" */ ; let vErrors = null; let errors = 0; if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if ((((((data.offeringId === undefined) && (missing0 = "offeringId")) || ((data.payinAmount === undefined) && (missing0 = "payinAmount"))) || ((data.claims === undefined) && (missing0 = "claims"))) || ((data.payinMethod === undefined) && (missing0 = "payinMethod"))) || ((data.payoutMethod === undefined) && (missing0 = "payoutMethod"))) {
            validate26.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }];
            return false;
        }
        else {
            if (data.additionalProperties !== undefined) {
                var valid0 = false;
                validate26.errors = [{ instancePath: instancePath + "/additionalProperties", schemaPath: "#/properties/additionalProperties/false schema", keyword: "false schema", params: {}, message: "boolean schema is false" }];
                return false;
            }
            else {
                var valid0 = true;
            }
            if (valid0) {
                if (data.offeringId !== undefined) {
                    const _errs1 = errors;
                    if (typeof data.offeringId !== "string") {
                        validate26.errors = [{ instancePath: instancePath + "/offeringId", schemaPath: "#/properties/offeringId/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                        return false;
                    }
                    var valid0 = _errs1 === errors;
                }
                else {
                    var valid0 = true;
                }
                if (valid0) {
                    if (data.payinAmount !== undefined) {
                        let data2 = data.payinAmount;
                        const _errs3 = errors;
                        const _errs4 = errors;
                        if (errors === _errs4) {
                            if (typeof data2 === "string") {
                                if (!pattern0.test(data2)) {
                                    validate26.errors = [{ instancePath: instancePath + "/payinAmount", schemaPath: "definitions.json#/definitions/decimalString/pattern", keyword: "pattern", params: { pattern: "^([0-9]+[.][0-9]+)$" }, message: "must match pattern \"" + "^([0-9]+[.][0-9]+)$" + "\"" }];
                                    return false;
                                }
                            }
                            else {
                                validate26.errors = [{ instancePath: instancePath + "/payinAmount", schemaPath: "definitions.json#/definitions/decimalString/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                return false;
                            }
                        }
                        var valid0 = _errs3 === errors;
                    }
                    else {
                        var valid0 = true;
                    }
                    if (valid0) {
                        if (data.claims !== undefined) {
                            let data3 = data.claims;
                            const _errs6 = errors;
                            if (errors === _errs6) {
                                if (Array.isArray(data3)) {
                                    var valid2 = true;
                                    const len0 = data3.length;
                                    for (let i0 = 0; i0 < len0; i0++) {
                                        const _errs8 = errors;
                                        if (typeof data3[i0] !== "string") {
                                            validate26.errors = [{ instancePath: instancePath + "/claims/" + i0, schemaPath: "#/properties/claims/items/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                            return false;
                                        }
                                        var valid2 = _errs8 === errors;
                                        if (!valid2) {
                                            break;
                                        }
                                    }
                                }
                                else {
                                    validate26.errors = [{ instancePath: instancePath + "/claims", schemaPath: "#/properties/claims/type", keyword: "type", params: { type: "array" }, message: "must be array" }];
                                    return false;
                                }
                            }
                            var valid0 = _errs6 === errors;
                        }
                        else {
                            var valid0 = true;
                        }
                        if (valid0) {
                            if (data.payinMethod !== undefined) {
                                let data5 = data.payinMethod;
                                const _errs10 = errors;
                                const _errs11 = errors;
                                if (errors === _errs11) {
                                    if (data5 && typeof data5 == "object" && !Array.isArray(data5)) {
                                        let missing1;
                                        if (((data5.kind === undefined) && (missing1 = "kind")) || ((data5.paymentDetails === undefined) && (missing1 = "paymentDetails"))) {
                                            validate26.errors = [{ instancePath: instancePath + "/payinMethod", schemaPath: "#/definitions/SelectedPaymentMethod/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }];
                                            return false;
                                        }
                                        else {
                                            const _errs13 = errors;
                                            for (const key0 in data5) {
                                                if (!((key0 === "kind") || (key0 === "paymentDetails"))) {
                                                    validate26.errors = [{ instancePath: instancePath + "/payinMethod", schemaPath: "#/definitions/SelectedPaymentMethod/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                                                    return false;
                                                    break;
                                                }
                                            }
                                            if (_errs13 === errors) {
                                                if (data5.kind !== undefined) {
                                                    const _errs14 = errors;
                                                    if (typeof data5.kind !== "string") {
                                                        validate26.errors = [{ instancePath: instancePath + "/payinMethod/kind", schemaPath: "#/definitions/SelectedPaymentMethod/properties/kind/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                        return false;
                                                    }
                                                    var valid4 = _errs14 === errors;
                                                }
                                                else {
                                                    var valid4 = true;
                                                }
                                                if (valid4) {
                                                    if (data5.paymentDetails !== undefined) {
                                                        let data7 = data5.paymentDetails;
                                                        const _errs16 = errors;
                                                        if (!(data7 && typeof data7 == "object" && !Array.isArray(data7))) {
                                                            validate26.errors = [{ instancePath: instancePath + "/payinMethod/paymentDetails", schemaPath: "#/definitions/SelectedPaymentMethod/properties/paymentDetails/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                                            return false;
                                                        }
                                                        var valid4 = _errs16 === errors;
                                                    }
                                                    else {
                                                        var valid4 = true;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        validate26.errors = [{ instancePath: instancePath + "/payinMethod", schemaPath: "#/definitions/SelectedPaymentMethod/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                        return false;
                                    }
                                }
                                var valid0 = _errs10 === errors;
                            }
                            else {
                                var valid0 = true;
                            }
                            if (valid0) {
                                if (data.payoutMethod !== undefined) {
                                    let data8 = data.payoutMethod;
                                    const _errs18 = errors;
                                    const _errs19 = errors;
                                    if (errors === _errs19) {
                                        if (data8 && typeof data8 == "object" && !Array.isArray(data8)) {
                                            let missing2;
                                            if (((data8.kind === undefined) && (missing2 = "kind")) || ((data8.paymentDetails === undefined) && (missing2 = "paymentDetails"))) {
                                                validate26.errors = [{ instancePath: instancePath + "/payoutMethod", schemaPath: "#/definitions/SelectedPaymentMethod/required", keyword: "required", params: { missingProperty: missing2 }, message: "must have required property '" + missing2 + "'" }];
                                                return false;
                                            }
                                            else {
                                                const _errs21 = errors;
                                                for (const key1 in data8) {
                                                    if (!((key1 === "kind") || (key1 === "paymentDetails"))) {
                                                        validate26.errors = [{ instancePath: instancePath + "/payoutMethod", schemaPath: "#/definitions/SelectedPaymentMethod/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }];
                                                        return false;
                                                        break;
                                                    }
                                                }
                                                if (_errs21 === errors) {
                                                    if (data8.kind !== undefined) {
                                                        const _errs22 = errors;
                                                        if (typeof data8.kind !== "string") {
                                                            validate26.errors = [{ instancePath: instancePath + "/payoutMethod/kind", schemaPath: "#/definitions/SelectedPaymentMethod/properties/kind/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                            return false;
                                                        }
                                                        var valid6 = _errs22 === errors;
                                                    }
                                                    else {
                                                        var valid6 = true;
                                                    }
                                                    if (valid6) {
                                                        if (data8.paymentDetails !== undefined) {
                                                            let data10 = data8.paymentDetails;
                                                            const _errs24 = errors;
                                                            if (!(data10 && typeof data10 == "object" && !Array.isArray(data10))) {
                                                                validate26.errors = [{ instancePath: instancePath + "/payoutMethod/paymentDetails", schemaPath: "#/definitions/SelectedPaymentMethod/properties/paymentDetails/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                                                return false;
                                                            }
                                                            var valid6 = _errs24 === errors;
                                                        }
                                                        else {
                                                            var valid6 = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        else {
                                            validate26.errors = [{ instancePath: instancePath + "/payoutMethod", schemaPath: "#/definitions/SelectedPaymentMethod/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                            return false;
                                        }
                                    }
                                    var valid0 = _errs18 === errors;
                                }
                                else {
                                    var valid0 = true;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        validate26.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate26.errors = vErrors; return errors === 0; }
