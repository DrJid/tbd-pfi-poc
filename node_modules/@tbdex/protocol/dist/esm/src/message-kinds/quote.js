import { Message } from '../message.js';
/**
 * Sent by the PFI in response to an RFQ. Includes a locked-in price that the PFI is willing to honor until
 * the quote expires
 * @beta
 */
export class Quote extends Message {
    /** a set of valid Message kinds that can come after a quote */
    validNext = new Set(['order', 'close']);
    /**
     * Creates a quote message with the given options
     * @param opts - options to create a quote
     */
    static create(opts) {
        const metadata = {
            ...opts.metadata,
            kind: 'quote',
            id: Message.generateId('quote'),
            createdAt: new Date().toISOString()
        };
        const message = { metadata, data: opts.data };
        Message.validateData('quote', message.data);
        return new Quote(message);
    }
    /** When this quote expires. Expressed as ISO8601 */
    get expiresAt() {
        return this.data.expiresAt;
    }
    /** the amount of payin currency that the PFI will receive */
    get payin() {
        return this.data.payin;
    }
    /** the amount of payout currency that Alice will receive */
    get payout() {
        return this.data.payout;
    }
}
