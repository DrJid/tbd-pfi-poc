var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { DidDhtMethod, DidIonMethod, DidKeyMethod } from '@web5/dids';
import { VerifiableCredential } from '@web5/credentials';
import { Offering } from './resource-kinds/index.js';
import { Rfq } from './message-kinds/index.js';
import { Resource } from './resource.js';
/**
 * Utility functions for testing purposes
 * @beta
 */
var DevTools = /** @class */ (function () {
    function DevTools() {
    }
    /**
     * creates and returns a DID
     * @param didMethod - the type of DID to create. defaults to did:key
     */
    DevTools.createDid = function (didMethod) {
        if (didMethod === void 0) { didMethod = 'key'; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(didMethod === 'key')) return [3 /*break*/, 2];
                        return [4 /*yield*/, DidKeyMethod.create()];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        if (!(didMethod === 'ion')) return [3 /*break*/, 4];
                        return [4 /*yield*/, DidIonMethod.create()];
                    case 3: return [2 /*return*/, _a.sent()];
                    case 4:
                        if (!(didMethod === 'dht')) return [3 /*break*/, 6];
                        return [4 /*yield*/, DidDhtMethod.create()];
                    case 5: return [2 /*return*/, _a.sent()];
                    case 6: throw new Error("".concat(didMethod, " method not implemented."));
                }
            });
        });
    };
    /**
     * creates and returns an example offering. Useful for testing purposes
     */
    DevTools.createOffering = function (opts) {
        var _a, _b;
        return Offering.create({
            metadata: { from: (_a = opts === null || opts === void 0 ? void 0 : opts.from) !== null && _a !== void 0 ? _a : 'did:ex:pfi' },
            data: (_b = opts === null || opts === void 0 ? void 0 : opts.offeringData) !== null && _b !== void 0 ? _b : DevTools.createOfferingData()
        });
    };
    /**
     * creates an example OfferingData. Useful for testing purposes
     */
    DevTools.createOfferingData = function () {
        return {
            description: 'Selling BTC for USD',
            payinCurrency: {
                currencyCode: 'USD',
                minAmount: '0.0',
                maxAmount: '999999.99',
            },
            payoutCurrency: {
                currencyCode: 'BTC',
                maxAmount: '999526.11'
            },
            payoutUnitsPerPayinUnit: '0.00003826',
            payinMethods: [{
                    kind: 'DEBIT_CARD',
                    requiredPaymentDetails: {
                        $schema: 'http://json-schema.org/draft-07/schema',
                        type: 'object',
                        properties: {
                            cardNumber: {
                                type: 'string',
                                description: 'The 16-digit debit card number',
                                minLength: 16,
                                maxLength: 16
                            },
                            expiryDate: {
                                type: 'string',
                                description: 'The expiry date of the card in MM/YY format',
                                pattern: '^(0[1-9]|1[0-2])\\/([0-9]{2})$'
                            },
                            cardHolderName: {
                                type: 'string',
                                description: 'Name of the cardholder as it appears on the card'
                            },
                            cvv: {
                                type: 'string',
                                description: 'The 3-digit CVV code',
                                minLength: 3,
                                maxLength: 3
                            }
                        },
                        required: ['cardNumber', 'expiryDate', 'cardHolderName', 'cvv'],
                        additionalProperties: false
                    }
                }],
            payoutMethods: [{
                    kind: 'BTC_ADDRESS',
                    requiredPaymentDetails: {
                        $schema: 'http://json-schema.org/draft-07/schema',
                        type: 'object',
                        properties: {
                            btcAddress: {
                                type: 'string',
                                description: 'your Bitcoin wallet address'
                            }
                        },
                        required: ['btcAddress'],
                        additionalProperties: false
                    }
                }],
            requiredClaims: {
                id: '7ce4004c-3c38-4853-968b-e411bafcd945',
                input_descriptors: [{
                        id: 'bbdb9b7c-5754-4f46-b63b-590bada959e0',
                        constraints: {
                            fields: [{
                                    path: ['$.type'],
                                    filter: {
                                        type: 'string',
                                        const: 'YoloCredential'
                                    }
                                }]
                        }
                    }]
            }
        };
    };
    /**
     * creates an example QuoteData. Useful for testing purposes
     */
    DevTools.createQuoteData = function () {
        return {
            expiresAt: new Date().toISOString(),
            payin: {
                currencyCode: 'BTC',
                amount: '0.01',
                fee: '0.0001',
                paymentInstruction: {
                    link: 'tbdex.io/example',
                    instruction: 'Fake instruction'
                }
            },
            payout: {
                currencyCode: 'USD',
                amount: '1000.00',
                paymentInstruction: {
                    link: 'tbdex.io/example',
                    instruction: 'Fake instruction'
                }
            }
        };
    };
    /**
     *
     * creates and returns an example rfq for the offering returned by {@link DevTools.createOffering}.
     * Useful for testing purposes.
     *
     * **NOTE**: generates a random credential that fulfills the offering's required claims
     */
    DevTools.createRfq = function (opts) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var sender, receiver, rfqData;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        sender = opts.sender, receiver = opts.receiver;
                        return [4 /*yield*/, DevTools.createRfqData(opts)];
                    case 1:
                        rfqData = _b.sent();
                        return [2 /*return*/, Rfq.create({
                                metadata: { from: sender.did, to: (_a = receiver === null || receiver === void 0 ? void 0 : receiver.did) !== null && _a !== void 0 ? _a : 'did:ex:pfi' },
                                data: rfqData
                            })];
                }
            });
        });
    };
    /**
     * creates an example RfqData. Useful for testing purposes
     */
    DevTools.createRfqData = function (opts) {
        return __awaiter(this, void 0, void 0, function () {
            var vcJwt, vc;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        vcJwt = '';
                        if (!(opts === null || opts === void 0 ? void 0 : opts.sender)) return [3 /*break*/, 3];
                        return [4 /*yield*/, VerifiableCredential.create({
                                type: 'YoloCredential',
                                issuer: opts.sender.did,
                                subject: opts.sender.did,
                                data: {
                                    'beep': 'boop'
                                }
                            })];
                    case 1:
                        vc = _a.sent();
                        return [4 /*yield*/, vc.sign({ did: opts.sender })];
                    case 2:
                        vcJwt = _a.sent();
                        _a.label = 3;
                    case 3: return [2 /*return*/, {
                            offeringId: Resource.generateId('offering'),
                            payinMethod: {
                                kind: 'DEBIT_CARD',
                                paymentDetails: {
                                    'cardNumber': '1234567890123456',
                                    'expiryDate': '12/22',
                                    'cardHolderName': 'Ephraim Bartholomew Winthrop',
                                    'cvv': '123'
                                }
                            },
                            payoutMethod: {
                                kind: 'BTC_ADDRESS',
                                paymentDetails: {
                                    btcAddress: '1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa'
                                }
                            },
                            payinAmount: '200.00',
                            claims: [vcJwt]
                        }];
                }
            });
        });
    };
    return DevTools;
}());
export { DevTools };
