// validator functions are compiled at build time. check ./build/compile-validators.js for more details
import * as compiledValidators from '../generated/compiled-validators.js';
/**
 * validates the payload against a json schema identified by name
 * @param payload - the payload to validate
 */
export function validate(payload, schemaName) {
    var validateFn = compiledValidators[schemaName];
    if (!validateFn) {
        throw new Error("no validator found for ".concat(schemaName));
    }
    validateFn(payload);
    if (validateFn.errors) {
        handleValidationError(validateFn.errors);
    }
}
function handleValidationError(errors) {
    // TODO modify default, return all errors
    // AJV is configured by default to stop validating after the 1st error is encountered which means
    // there will only ever be one error;
    var errorObj = errors[0];
    var instancePath = errorObj.instancePath, message = errorObj.message, params = errorObj.params;
    instancePath || (instancePath = 'message');
    // if an error occurs for a property with an enum type, the default error is "must have one of the allowed types."
    // which is... unhelpful. `params.allowedValues` includes the allowed values. add this to the message if it exists
    message = params.allowedValues ? "".concat(message, " - ").concat(params.allowedValues.join(', ')) : message;
    throw new Error("".concat(instancePath, ": ").concat(message));
}
