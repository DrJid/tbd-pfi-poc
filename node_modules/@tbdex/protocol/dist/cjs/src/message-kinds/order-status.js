var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { Message } from '../message.js';
/**
 * Sent by the PFI to Alice to convey the current status of an order. There can be many OrderStatus
 * messages in a given Exchange
 * @beta
 */
var OrderStatus = /** @class */ (function (_super) {
    __extends(OrderStatus, _super);
    function OrderStatus() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /** a set of valid Message kinds that can come after an order status */
        _this.validNext = new Set([]);
        return _this;
    }
    /**
     * Creates an order status with the given options
     * @param opts - options to create an order status
     */
    OrderStatus.create = function (opts) {
        var metadata = __assign(__assign({}, opts.metadata), { kind: 'orderstatus', id: Message.generateId('orderstatus'), createdAt: new Date().toISOString() });
        var message = { metadata: metadata, data: opts.data };
        Message.validateData('orderstatus', message.data);
        return new OrderStatus(message);
    };
    Object.defineProperty(OrderStatus.prototype, "orderStatus", {
        /** Current status of Order that's being executed (e.g. PROCESSING, COMPLETED, FAILED etc.) */
        get: function () {
            return this.data.orderStatus;
        },
        enumerable: false,
        configurable: true
    });
    return OrderStatus;
}(Message));
export { OrderStatus };
