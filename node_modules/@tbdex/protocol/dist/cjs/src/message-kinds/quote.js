var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { Message } from '../message.js';
/**
 * Sent by the PFI in response to an RFQ. Includes a locked-in price that the PFI is willing to honor until
 * the quote expires
 * @beta
 */
var Quote = /** @class */ (function (_super) {
    __extends(Quote, _super);
    function Quote() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /** a set of valid Message kinds that can come after a quote */
        _this.validNext = new Set(['order', 'close']);
        return _this;
    }
    /**
     * Creates a quote message with the given options
     * @param opts - options to create a quote
     */
    Quote.create = function (opts) {
        var metadata = __assign(__assign({}, opts.metadata), { kind: 'quote', id: Message.generateId('quote'), createdAt: new Date().toISOString() });
        var message = { metadata: metadata, data: opts.data };
        Message.validateData('quote', message.data);
        return new Quote(message);
    };
    Object.defineProperty(Quote.prototype, "expiresAt", {
        /** When this quote expires. Expressed as ISO8601 */
        get: function () {
            return this.data.expiresAt;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Quote.prototype, "payin", {
        /** the amount of payin currency that the PFI will receive */
        get: function () {
            return this.data.payin;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Quote.prototype, "payout", {
        /** the amount of payout currency that Alice will receive */
        get: function () {
            return this.data.payout;
        },
        enumerable: false,
        configurable: true
    });
    return Quote;
}(Message));
export { Quote };
