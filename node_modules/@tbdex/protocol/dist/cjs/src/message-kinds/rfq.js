var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { BigNumber } from 'bignumber.js';
import { VerifiableCredential, PresentationExchange } from '@web5/credentials';
import { Message } from '../message.js';
import Ajv from 'ajv';
/**
 * Message sent by Alice to PFI to requesting for a quote (RFQ)
 * @beta
 */
var Rfq = /** @class */ (function (_super) {
    __extends(Rfq, _super);
    function Rfq() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /** a set of valid Message kinds that can come after an rfq */
        _this.validNext = new Set(['quote', 'close']);
        return _this;
    }
    /**
     * Creates an rfq with the given options
     * @param opts - options to create an rfq
     * @returns {@link Rfq}
     */
    Rfq.create = function (opts) {
        var id = Message.generateId('rfq');
        var metadata = __assign(__assign({}, opts.metadata), { kind: 'rfq', id: id, exchangeId: id, createdAt: new Date().toISOString() });
        // TODO: hash `data.payinMethod.paymentDetails` and set `private`
        // TODO: hash `data.payoutMethod.paymentDetails` and set `private`
        var message = { metadata: metadata, data: opts.data };
        Message.validateData('rfq', message.data);
        return new Rfq(message);
    };
    /**
     * evaluates this rfq against the provided offering
     * @param offering - the offering to evaluate this rfq against
     * @throws if {@link Rfq.offeringId} doesn't match the provided offering's id
     * @throws if {@link Rfq.payinAmount} exceeds the provided offering's max units allowed or is below the offering's min units allowed
     * @throws if {@link Rfq.payinMethod} property `kind` cannot be validated against the provided offering's payinMethod kinds
     * @throws if {@link Rfq.payinMethod} property `paymentDetails` cannot be validated against the provided offering's payinMethod requiredPaymentDetails
     * @throws if {@link Rfq.payoutMethod} property `kind` cannot be validated against the provided offering's payoutMethod kinds
     * @throws if {@link Rfq.payoutMethod} property `paymentDetails` cannot be validated against the provided offering's payoutMethod requiredPaymentDetails
     */
    Rfq.prototype.verifyOfferingRequirements = function (offering) {
        return __awaiter(this, void 0, void 0, function () {
            var payinAmount, maxAmount, minAmount;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (offering.metadata.id !== this.offeringId) {
                            throw new Error("offering id mismatch. (rfq) ".concat(this.offeringId, " !== ").concat(offering.metadata.id, " (offering)"));
                        }
                        if (offering.data.payinCurrency.maxAmount) {
                            payinAmount = BigNumber(this.payinAmount);
                            maxAmount = BigNumber(offering.data.payinCurrency.maxAmount);
                            if (payinAmount.isGreaterThan(maxAmount)) {
                                throw new Error("rfq payinAmount exceeds offering's maxAmount. (rfq) ".concat(this.payinAmount, " > ").concat(offering.data.payinCurrency.maxAmount, " (offering)"));
                            }
                        }
                        // Verify payin amount is more than minimum
                        if (offering.data.payinCurrency.minAmount) {
                            payinAmount !== null && payinAmount !== void 0 ? payinAmount : (payinAmount = BigNumber(this.payinAmount));
                            minAmount = BigNumber(offering.data.payinCurrency.minAmount);
                            if (payinAmount.isLessThan(minAmount)) {
                                throw new Error("rfq payinAmount is below offering's minAmount. (rfq) ".concat(this.payinAmount, " > ").concat(offering.data.payinCurrency.minAmount, " (offering)"));
                            }
                        }
                        // Verify payin/payout methods
                        this.verifyPaymentMethod(this.payinMethod, offering.data.payinMethods, 'payin');
                        this.verifyPaymentMethod(this.payoutMethod, offering.data.payoutMethods, 'payout');
                        return [4 /*yield*/, this.verifyClaims(offering)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Validate the Rfq's payin/payout method against an Offering's allow payin/payout methods
     *
     * @param rfqPaymentMethod - The Rfq's selected payin/payout method being validated
     * @param allowedPaymentMethods - The Offering's allowed payin/payout methods
     *
     * @throws if {@link Rfq.payinMethod} property `kind` cannot be validated against the provided offering's payinMethod kinds
     * @throws if {@link Rfq.payinMethod} property `paymentDetails` cannot be validated against the provided offering's payinMethod requiredPaymentDetails
     * @throws if {@link Rfq.payoutMethod} property `kind` cannot be validated against the provided offering's payoutMethod kinds
     * @throws if {@link Rfq.payoutMethod} property `paymentDetails` cannot be validated against the provided offering's payoutMethod requiredPaymentDetails
     */
    Rfq.prototype.verifyPaymentMethod = function (rfqPaymentMethod, allowedPaymentMethods, payDirection) {
        var paymentMethodMatches = allowedPaymentMethods.filter(function (paymentMethod) { return paymentMethod.kind === rfqPaymentMethod.kind; });
        if (!paymentMethodMatches.length) {
            var paymentMethodKinds = allowedPaymentMethods.map(function (paymentMethod) { return paymentMethod.kind; }).join();
            throw new Error("offering does not support rfq's ".concat(payDirection, "Method kind. (rfq) ").concat(rfqPaymentMethod.kind, " was not found in: ").concat(paymentMethodKinds, " (offering)"));
        }
        var ajv = new Ajv.default();
        var invalidPaymentDetailsErrors = new Set();
        // Only one matching paymentMethod is needed
        for (var _i = 0, paymentMethodMatches_1 = paymentMethodMatches; _i < paymentMethodMatches_1.length; _i++) {
            var paymentMethodMatch = paymentMethodMatches_1[_i];
            var validate = ajv.compile(paymentMethodMatch.requiredPaymentDetails);
            var isValid = validate(rfqPaymentMethod.paymentDetails);
            if (isValid) {
                break;
            }
            invalidPaymentDetailsErrors.add(validate.errors);
        }
        if (invalidPaymentDetailsErrors.size > 0) {
            throw new Error("rfq ".concat(payDirection, "Method paymentDetails could not be validated against offering requiredPaymentDetails. Schema validation errors: ").concat(Array.from(invalidPaymentDetailsErrors).join()));
        }
    };
    /**
     * checks the claims provided in this rfq against an offering's requirements
     * @param offering - the offering to check against
     * @throws if rfq's claims do not fulfill the offering's requirements
     */
    Rfq.prototype.verifyClaims = function (offering) {
        return __awaiter(this, void 0, void 0, function () {
            var credentials, _i, credentials_1, credential;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!offering.data.requiredClaims) {
                            return [2 /*return*/];
                        }
                        credentials = PresentationExchange.selectCredentials({ vcJwts: this.claims, presentationDefinition: offering.data.requiredClaims });
                        if (!credentials.length) {
                            throw new Error("claims do not fulfill the offering's requirements");
                        }
                        _i = 0, credentials_1 = credentials;
                        _a.label = 1;
                    case 1:
                        if (!(_i < credentials_1.length)) return [3 /*break*/, 4];
                        credential = credentials_1[_i];
                        return [4 /*yield*/, VerifiableCredential.verify({ vcJwt: credential })];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        _i++;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    Object.defineProperty(Rfq.prototype, "offeringId", {
        /** Offering which Alice would like to get a quote for */
        get: function () {
            return this.data.offeringId;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Rfq.prototype, "payinAmount", {
        /** Amount of payin currency you want to spend in order to receive payout currency */
        get: function () {
            return this.data.payinAmount;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Rfq.prototype, "claims", {
        /** Array of claims that satisfy the respective offering's requiredClaims */
        get: function () {
            return this.data.claims;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Rfq.prototype, "payinMethod", {
        /** Selected payment method that Alice will use to send the listed payin currency to the PFI. */
        get: function () {
            return this.data.payinMethod;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Rfq.prototype, "payoutMethod", {
        /** Selected payment method that the PFI will use to send the listed payout currency to Alice */
        get: function () {
            return this.data.payoutMethod;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Converts this rfq message to a json object
     */
    Rfq.prototype.toJSON = function () {
        var jsonMessage = _super.prototype.toJSON.call(this);
        if (this._private) {
            jsonMessage['private'] = this._private;
        }
        return jsonMessage;
    };
    return Rfq;
}(Message));
export { Rfq };
