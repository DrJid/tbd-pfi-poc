import { Rfq, Quote, Order, OrderStatus, Close } from './message-kinds/index.js';
import { Offering } from './resource-kinds/index.js';
/**
 * parses a json message into an instance of message kind's class
 * Note: This really should be a part of {@link Message.parse} but can't be because it creates a circular dependency
 * due to each concrete MessageKind class extending Message
 * @param jsonMessage - the message to parse
 */
export function messageFactory(jsonMessage) {
    switch (jsonMessage.metadata.kind) {
        case 'rfq': return new Rfq(jsonMessage);
        case 'quote': return new Quote(jsonMessage);
        case 'order': return new Order(jsonMessage);
        case 'orderstatus': return new OrderStatus(jsonMessage);
        case 'close': return new Close(jsonMessage);
        default:
            throw new Error("Unrecognized message kind (".concat(jsonMessage.metadata.kind, ")"));
    }
}
/**
 * parses a json message into an instance of message kind's class
 * Note: This really should be a part of {@link Resource.parse} but can't be because it creates a circular dependency
 * due to each concrete MessageKind class extending Message
 * @param jsonResource - the resource to parse
 * @returns
 */
export function resourceFactory(jsonResource) {
    switch (jsonResource.metadata.kind) {
        case 'offering': return new Offering(jsonResource);
        default:
            throw new Error("Unrecognized resource kind (".concat(jsonResource.metadata.kind, ")"));
    }
}
