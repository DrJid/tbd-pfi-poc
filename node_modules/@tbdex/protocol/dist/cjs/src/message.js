var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { validate } from './validator.js';
import { Crypto } from './crypto.js';
import { typeid } from 'typeid-js';
/**
 * Representation of the protocol messages.
 * It also provides helper functions to manipulate raw messages, JSON and parsing.
 * @beta
 */
var Message = /** @class */ (function () {
    function Message(jsonMessage) {
        this._metadata = jsonMessage.metadata;
        this._data = jsonMessage.data;
        this._signature = jsonMessage.signature;
    }
    /**
     * parses the json message into a message instance. performs format validation and an integrity check on the signature
     * @param message - the message to parse. can either be an object or a string
     * @returns {@link Message}
     */
    Message.parse = function (message) {
        return __awaiter(this, void 0, void 0, function () {
            var jsonMessage, errorMessage;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        try {
                            jsonMessage = typeof message === 'string' ? JSON.parse(message) : message;
                        }
                        catch (e) {
                            errorMessage = e instanceof Error ? e.message : e;
                            throw new Error("parse: Failed to parse message. Error: ".concat(errorMessage));
                        }
                        return [4 /*yield*/, Message.verify(jsonMessage)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, Message.factory(jsonMessage)];
                }
            });
        });
    };
    /**
     * validates the message and verifies the cryptographic signature
     * @throws if the message is invalid
     * @throws see {@link Crypto.verify}
     * @returns Message signer's DID
     */
    Message.verify = function (message) {
        return __awaiter(this, void 0, void 0, function () {
            var jsonMessage, digest, signer;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        jsonMessage = message instanceof Message ? message.toJSON() : message;
                        Message.validate(jsonMessage);
                        digest = Crypto.digest({ metadata: jsonMessage.metadata, data: jsonMessage.data });
                        return [4 /*yield*/, Crypto.verify({ detachedPayload: digest, signature: jsonMessage.signature })];
                    case 1:
                        signer = _a.sent();
                        if (jsonMessage.metadata.from !== signer) { // ensure that DID used to sign matches `from` property in metadata
                            throw new Error('Signature verification failed: Expected DID in kid of JWS header must match metadata.from');
                        }
                        return [2 /*return*/, signer];
                }
            });
        });
    };
    /** Generates a unique id with the message kind's prefix */
    Message.generateId = function (messageKind) {
        return typeid(messageKind).toString();
    };
    /**
     * validates the message provided against the appropriate json schemas.
     * 2-phased validation: First validates the message structure and then
     * validates `data` based on the value of `metadata.kind`
     * @param jsonMessage - the message to validate
     *
     * @throws `Error` if validation fails
     */
    Message.validate = function (jsonMessage) {
        // validate the message structure
        validate(jsonMessage, 'message');
        // validate the value of `data`
        validate(jsonMessage['data'], jsonMessage['metadata']['kind']);
    };
    /**
     * Validates `data` section of message only. This is useful for partially validating
     * unsigned Messages.
     */
    Message.validateData = function (kind, messageData) {
        // validate the value of `data`
        validate(messageData, kind);
    };
    /**
     * returns an instance of the appropriate MessageKind class based on the value of `jsonMessage.metadata.kind`
     * @param jsonMessage - the message to parse
     */
    Message.fromJson = function (jsonMessage) {
        return Message.factory(jsonMessage);
    };
    /**
     * signs the message as a jws with detached content and sets the signature property
     * @param did - the signer's DID
     */
    Message.prototype.sign = function (did) {
        return __awaiter(this, void 0, void 0, function () {
            var payload, payloadDigest, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        payload = { metadata: this.metadata, data: this.data };
                        payloadDigest = Crypto.digest(payload);
                        _a = this;
                        return [4 /*yield*/, Crypto.sign({ did: did, payload: payloadDigest, detached: true })];
                    case 1:
                        _a._signature = _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * validates the message and verifies the cryptographic signature
     * @throws if the message is invalid
     * @throws see {@link Crypto.verify}
     * @returns Signer's DID
     */
    Message.prototype.verify = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, Message.verify(this)];
            });
        });
    };
    Object.defineProperty(Message.prototype, "metadata", {
        /** The metadata object contains fields about the message and is present in every tbdex message. */
        get: function () {
            return this._metadata;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Message.prototype, "data", {
        /** the message kind's content */
        get: function () {
            return this._data;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Message.prototype, "signature", {
        /** the message's cryptographic signature */
        get: function () {
            return this._signature;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Message.prototype, "id", {
        /** the message id */
        get: function () {
            return this.metadata.id;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Message.prototype, "exchangeId", {
        /** ID for an "exchange" of messages between Alice - PFI. Uses the id of the RFQ that initiated the exchange */
        get: function () {
            return this.metadata.exchangeId;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Message.prototype, "kind", {
        /** the message kind (e.g. rfq, quote) */
        get: function () {
            return this.metadata.kind;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Message.prototype, "from", {
        /** The sender's DID */
        get: function () {
            return this.metadata.from;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Message.prototype, "to", {
        /** the recipient's DID */
        get: function () {
            return this.metadata.to;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Message.prototype, "createdAt", {
        /** Message creation time. Expressed as ISO8601 */
        get: function () {
            return this.metadata.createdAt;
        },
        enumerable: false,
        configurable: true
    });
    /** Rfq type guard */
    Message.prototype.isRfq = function () {
        return this.metadata.kind === 'rfq';
    };
    /** Quote type guard */
    Message.prototype.isQuote = function () {
        return this.metadata.kind === 'quote';
    };
    /** Order type guard */
    Message.prototype.isOrder = function () {
        return this.metadata.kind === 'order';
    };
    /** OrderStatus type guard */
    Message.prototype.isOrderStatus = function () {
        return this.metadata.kind === 'orderstatus';
    };
    /** Close type guard */
    Message.prototype.isClose = function () {
        return this.metadata.kind === 'close';
    };
    /**
     * returns the message as a json object. Automatically used by `JSON.stringify` method.
     * @throws if message is missing signature
     */
    Message.prototype.toJSON = function () {
        var message = {
            metadata: this.metadata,
            data: this.data,
            signature: this.signature
        };
        return message;
    };
    return Message;
}());
export { Message };
