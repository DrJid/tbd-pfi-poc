var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { Resource } from '../resource.js';
/**
 * An Offering is used by the PFI to describe a currency pair they have to offer
 * including the requirements, conditions, and constraints in
 * order to fulfill that offer.
 * @beta
 */
var Offering = /** @class */ (function (_super) {
    __extends(Offering, _super);
    function Offering() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Creates an Offering with the given options
     * @param opts - options to create an offering
     */
    Offering.create = function (opts) {
        var metadata = __assign(__assign({}, opts.metadata), { kind: 'offering', id: Resource.generateId('offering'), createdAt: new Date().toISOString() });
        var message = { metadata: metadata, data: opts.data };
        Resource.validateData('offering', message.data);
        return new Offering(message);
    };
    Object.defineProperty(Offering.prototype, "description", {
        /** Brief description of what is being offered. */
        get: function () {
            return this.data.description;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Offering.prototype, "payoutUnitsPerPayinUnit", {
        /** Number of payout currency units for one payin currency unit (i.e 290000 USD for 1 BTC) */
        get: function () {
            return this.data.payoutUnitsPerPayinUnit;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Offering.prototype, "payinCurrency", {
        /** Details about the currency that the PFI is buying in exchange for payoutCurrency. */
        get: function () {
            return this.data.payinCurrency;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Offering.prototype, "payoutCurrency", {
        /** Details about the currency that the PFI is buying in exchange for payinCurrency. */
        get: function () {
            return this.data.payoutCurrency;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Offering.prototype, "payinMethods", {
        /** A list of accepted payment methods that Alice can use to send payinCurrency to a PFI */
        get: function () {
            return this.data.payinMethods;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Offering.prototype, "payoutMethods", {
        /** A list of accepted payment methods that Alice can use to receive payoutCurrency from a PFI */
        get: function () {
            return this.data.payoutMethods;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Offering.prototype, "requiredClaims", {
        /** Articulates the claim(s) required when submitting an RFQ for this offering. */
        get: function () {
            return this.data.requiredClaims;
        },
        enumerable: false,
        configurable: true
    });
    return Offering;
}(Resource));
export { Offering };
