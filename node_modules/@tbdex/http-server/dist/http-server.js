import express from 'express';
import cors from 'cors';
import { getExchanges, getOfferings, submitOrder, submitClose, submitRfq } from './request-handlers/index.js';
import { jsonBodyParser } from './middleware/index.js';
import { fakeExchangesApi, fakeOfferingsApi } from './fakes.js';
const defaults = {
    offeringsApi: fakeOfferingsApi,
    exchangesApi: fakeExchangesApi,
    pfiDid: 'did:ex:pfi'
};
/**
 * TBDex HTTP Server powered by Express
 * @beta
 */
export class TbdexHttpServer {
    /**
     * Map of callbacks handlers for the available requests
     */
    callbacks;
    /**
     * Express server instance
     */
    api;
    /**
     * PFI Exchanges API
     */
    exchangesApi;
    /**
     * PFI Offerings API
     */
    offeringsApi;
    /**
     * PFI DID
     */
    pfiDid;
    constructor(opts) {
        this.callbacks = {};
        opts = { ...defaults, ...opts };
        const { offeringsApi, exchangesApi, pfiDid } = opts;
        this.exchangesApi = exchangesApi;
        this.offeringsApi = offeringsApi;
        this.pfiDid = pfiDid;
        // initialize api here so that consumers can attach custom endpoints
        const api = express();
        api.use(cors());
        api.use(jsonBodyParser());
        this.api = api;
    }
    /**
     * Setup the callback for the available Submit Requests (eg. RFQ, Order, Close)
     * @param messageKind - the kind of message to be handled
     * @param callback - the handler for the message
     */
    submit(messageKind, callback) {
        this.callbacks[messageKind] = callback;
    }
    /**
     * Setup the callback for the available Get Requests (eg. offerings, exchanges)
     * @param resourceKind - the kind of resource to be handled
     * @param callback - the handler for the resource
     */
    get(resourceKind, callback) {
        this.callbacks[resourceKind] = callback;
    }
    /**
     * Setup the PFI routes and start a express server to listen for incoming requests
     * @param port - server port number
     * @param callback - to be called when the server is ready
     */
    listen(port, callback) {
        const { offeringsApi, exchangesApi, pfiDid } = this;
        this.api.post('/exchanges/:exchangeId/rfq', submitRfq({
            callback: this.callbacks['rfq'], offeringsApi, exchangesApi,
        }));
        this.api.post('/exchanges/:exchangeId/order', submitOrder({
            callback: this.callbacks['order'], exchangesApi
        }));
        this.api.post('/exchanges/:exchangeId/close', submitClose({
            callback: this.callbacks['close'], exchangesApi
        }));
        this.api.get('/exchanges', getExchanges({
            callback: this.callbacks['exchanges'], exchangesApi, pfiDid
        }));
        this.api.get('/offerings', getOfferings({
            callback: this.callbacks['offerings'], offeringsApi
        }));
        // TODO: support hostname and backlog arguments
        return this.api.listen(port, callback);
    }
}
//# sourceMappingURL=http-server.js.map