/// <reference types="node" resolution-mode="require"/>
import type { GetCallback, GetCallbacks, GetKind, SubmitCallback, SubmitCallbacks, SubmitKind, OfferingsApi, ExchangesApi } from './types.js';
import type { Express } from 'express';
/**
 * Union type alias for the RequestKind
 * @beta
 */
type RequestKind = GetKind | SubmitKind;
/**
 * Maps the requests to their respective callbacks handlers
 * @beta
 */
type CallbackMap = {
    [Kind in RequestKind]?: Kind extends GetKind ? GetCallback<Kind> : Kind extends SubmitKind ? SubmitCallback<Kind> : never;
};
/**
 * Options for creating a new HttpServer
 * @beta
 */
type NewHttpServerOptions = {
    offeringsApi?: OfferingsApi;
    exchangesApi?: ExchangesApi;
    pfiDid?: string;
};
/**
 * TBDex HTTP Server powered by Express
 * @beta
 */
export declare class TbdexHttpServer {
    /**
     * Map of callbacks handlers for the available requests
     */
    callbacks: CallbackMap;
    /**
     * Express server instance
     */
    api: Express;
    /**
     * PFI Exchanges API
     */
    exchangesApi: ExchangesApi;
    /**
     * PFI Offerings API
     */
    offeringsApi: OfferingsApi;
    /**
     * PFI DID
     */
    pfiDid: string;
    constructor(opts?: NewHttpServerOptions);
    /**
     * Setup the callback for the available Submit Requests (eg. RFQ, Order, Close)
     * @param messageKind - the kind of message to be handled
     * @param callback - the handler for the message
     */
    submit<T extends SubmitKind>(messageKind: T, callback: SubmitCallbacks[T]): void;
    /**
     * Setup the callback for the available Get Requests (eg. offerings, exchanges)
     * @param resourceKind - the kind of resource to be handled
     * @param callback - the handler for the resource
     */
    get<T extends GetKind>(resourceKind: T, callback: GetCallbacks[T]): void;
    /**
     * Setup the PFI routes and start a express server to listen for incoming requests
     * @param port - server port number
     * @param callback - to be called when the server is ready
     */
    listen(port: number | string, callback?: () => void): import("http").Server<typeof import("http").IncomingMessage, typeof import("http").ServerResponse>;
}
export {};
//# sourceMappingURL=http-server.d.ts.map