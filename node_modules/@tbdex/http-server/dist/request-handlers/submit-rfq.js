import { Message } from '@tbdex/protocol';
import { CallbackError } from '../callback-error.js';
export function submitRfq(options) {
    const { offeringsApi, exchangesApi, callback } = options;
    return async function (req, res) {
        let message;
        try {
            message = await Message.parse(req.body);
        }
        catch (e) {
            const errorResponse = { detail: `Parsing of TBDex message failed: ${e.message}` };
            return res.status(400).json({ errors: [errorResponse] });
        }
        if (!message.isRfq()) {
            const errorResponse = { detail: 'expected request body to be a valid rfq' };
            return res.status(400).json({ errors: [errorResponse] });
        }
        // TODO: check message.from against allowlist
        const rfqExists = !!await exchangesApi.getRfq({ exchangeId: message.id });
        if (rfqExists) {
            const errorResponse = { detail: `rfq ${message.id} already exists` };
            return res.status(409).json({ errors: [errorResponse] });
        }
        const offering = await offeringsApi.getOffering({ id: message.data.offeringId });
        if (!offering) {
            const errorResponse = { detail: `offering ${message.data.offeringId} does not exist` };
            return res.status(400).json({ errors: [errorResponse] });
        }
        try {
            await message.verifyOfferingRequirements(offering);
        }
        catch (e) {
            const errorResponse = { detail: `Failed to verify offering requirements: ${e.message}` };
            return res.status(400).json({ errors: [errorResponse] });
        }
        if (!callback) {
            return res.sendStatus(202);
        }
        try {
            await callback({ request: req, response: res }, message, { offering });
        }
        catch (e) {
            if (e instanceof CallbackError) {
                return res.status(e.statusCode).json({ errors: e.details });
            }
            else {
                const errorDetail = { detail: 'umm idk' };
                return res.status(500).json({ errors: [errorDetail] });
            }
        }
        return res.sendStatus(202);
    };
}
//# sourceMappingURL=submit-rfq.js.map